package com.javarush.test.level02.lesson08.task04;

/* Минимум четырех чисел
Написать функцию, которая вычисляет минимум из четырёх чисел.
Функция min(a,b,c,d) должна использовать (вызывать) функцию min(a,b)
Подсказка:
Нужно написать тело обеих существующих функций min и исправить их возвращаемые значения.
*/
public class Solution
{
    public static int min(int a, int b, int c, int d)
    {
        int e;
        if (min(a, b) < min(c,d))
            e = min(a, b);
        else
            e = min(c, d);
            
        return e;    

    }

    public static int min(int a, int b)
    {
        int c;
        if (a<b)
            c = a;
        else
            c = b;
            
        return c;    

    }

    public static void main(String[] args) throws Exception
    {
        System.out.println( min(-20, -10) );
        System.out.println( min(-20, -10, -30, -40) );
        System.out.println( min(-20, -10, -30, 40) );
    }
}


? Программа скомпилировалась без ошибок.
? Программа прошла все тесты. Вы выполнили задание! 
  Вот что программа вывела на экран за время работы:

-20
-40
-30


******


package com.javarush.test.level02.lesson08.task05;


/* Дублирование строки
Написать функцию, которая выводит переданную строку на экран три раза, каждый раз с новой строки.
*/
public class Solution
{
    public static void print3(String s)
    {
        System.out.println(s);
        System.out.println(s);
        System.out.println(s);

    }

    public static void main(String[] args)
    {
        print3("I love you!");
    }
}


******


package com.javarush.test.level02.lesson08.task06;

/* Вывод текста на экран
Написать функцию, которая выводит переданную строку (слово) на экран три раза, но в одной строке.
Слова должны быть разделены пробелом и не должны сливаться в одно.
*/
public class Solution
{
    public static void print3(String s)
    {
        System.out.print(s + " ");
        System.out.print(s + " ");
        System.out.println(s);

    }
    public static void main(String[] args)
    {
        print3("window");
        print3("file");
    }
}


? Программа скомпилировалась без ошибок.
? Программа прошла все тесты. Вы выполнили задание! 
  Вот что программа вывела на экран за время работы:

window window window
file file file


*******


package com.javarush.test.level03.lesson03.task03;

/* 10 процентов
Реализуйте метод addTenPercent, который увеличивает переданное целое число на 10%.
Исправьте ошибку в сигнатуре метода.
Подсказка: подумайте, какие у этого метода входные и выходные данные.
*/
public class Solution
{
    public static double addTenPercent(int i) {
        double b = i + i*0.1;
        return b;

    }

    public static void main(String[] args) {
        System.out.println(addTenPercent(10));
    }
}


********


package com.javarush.test.level03.lesson03.task01;

/* Реализация метода
Добавьте метод public static void printString(String s) который будет выводить переданную строку на экран.
*/
public class Solution
{
    //напишите тут ваш код
    public static void printString(String s){
        System.out.print(s);
    }

    public static void main(String[] args) {
        printString("Hello Amigo!");
    }
}


*******


package com.javarush.test.level03.lesson03.task02;

/* Конвертер валют
Реализуйте метод convertEurToUsd, переводящий евро в доллары по заданному курсу.
Вызовите его дважды в методе main с любыми параметрами. Результаты выведите на экран, каждый раз с новой строки.
Подсказка:
Расчет выполняется по формуле: долларСША = евро * курс
*/
public class Solution
{
    public static void main(String[] args)
    {
        //напишите тут ваш код
        System.out.println(convertEurToUsd(555, 1.55));
        System.out.println(convertEurToUsd(300, 1.55));
    }

    public static double convertEurToUsd(int eur, double course)
    {
        double Usd = eur * course;
        return Usd;
    }
}


*********


package com.javarush.test.level03.lesson05.task01;

/* Измените программу
Подумайте, что делает программа.
Измените метод public static void printFullName(Student student). Метод должен выводить полное ФИО студента на экран.
Слова разделить пробелом.
Пример вывода:
Mark Elliot Zuckerberg
*/

public class Solution
{
    public static void main(String[] args)
    {
        Student student = new Student();
        student.firstName = "Mark";
        student.middleName = "Elliot";
        student.lastName = "Zuckerberg";
        printFullName(student);
    }

    public static void printFullName(Student student)
    {
        System.out.print(student.firstName + " " + student.middleName + " " + student.lastName);
    }

    public static class Student
    {
        public String firstName;
        public String middleName;
        public String lastName;
    }
}


Mark Elliot Zuckerberg
Process finished with exit code 0


*********


package com.javarush.test.level03.lesson05.task02;

/* Реализация метода
Реализуйте метод public static void writeToConsole(String s), который добавляет к началу строки выражение "printing: "
и выводит измененную строку на экран, каждый раз с новой строки.
Пример вывода для "Hello world!":
printing: Hello world!
*/

public class Solution
{
    public static void main(String[] args)
    {
        writeToConsole("Hello world!");
    }

    public static void writeToConsole(String s)
    {
        //напишите тут ваш код
        System.out.println("printing: " + s);
    }
}

printing: Hello world!

Process finished with exit code 0


*********


package com.javarush.test.level03.lesson05.task03;

/* Конвертер времени
Добавьте метод public static int convertToSeconds(int hour) который будет конвертировать часы в секунды.
Вызовите его дважды в методе main с любыми параметрами. Результаты выведите на экран, каждый раз с новой строки.
*/

public class Solution
{

    //напишите тут ваш код
    public static int convertToSeconds(int hour) {
        int second = hour*3600;
        return second;
    }

    public static void main(String[] args) {
        //напишите тут ваш код
        System.out.println(convertToSeconds(3));
        System.out.println(convertToSeconds(24));
    }
}

10800
86400

Process finished with exit code 0


*********


package com.javarush.test.level03.lesson06.task03;

/* Семь цветов радуги
Создать 7 объектов, чтобы на экран вывелись 7 цветов радуги (ROYGBIV).
Каждый объект при создании выводит на экран определенный цвет.
*/

public class Solution
{
    public static void main(String[] args)
    {
        //напишите тут ваш код
        Red red = new Red();
        Orange orange = new Orange();
        Yellow yellow = new Yellow();
        Green green = new Green();
        Blue blue = new Blue();
        Indigo indigo = new Indigo();
        Violet violet = new Violet();

    }

    public static class Red
    {
        public Red() {
            System.out.println("Red");
        }
    }

    public static class Orange
    {
        public Orange() {
            System.out.println("Orange");
        }
    }

    public static class Yellow
    {
        public Yellow() {
            System.out.println("Yellow");
        }
    }

    public static class Green
    {
        public Green() {
            System.out.println("Green");
        }
    }

    public static class Blue
    {
        public Blue() {
            System.out.println("Blue");
        }
    }

    public static class Indigo
    {
        public Indigo() {
            System.out.println("Indigo");
        }
    }

    public static class Violet
    {
        public Violet() {
            System.out.println("Violet");
        }
    }
}

Red
Orange
Yellow
Green
Blue
Indigo
Violet

Process finished with exit code 0


********


package com.javarush.test.level03.lesson06.task04;

/* Экранирование символов
Про экранирование символов в Java читайте в дополнительном материале к лекции.
Вывести на экран следующий текст - две строки:

It's Windows path: "C:\Program Files\Java\jdk1.7.0\bin"
It's Java string: \"C:\\Program Files\\Java\\jdk1.7.0\\bin\"
*/

public class Solution
{
    public static void main(String[] args)
    {
        //напишите тут ваш код
        System.out.println("It's Windows path: \"C:\\Program Files\\Java\\jdk1.7.0\\bin\"");
        System.out.println("It's Java string: \\\"C:\\\\Program Files\\\\Java\\\\jdk1.7.0\\\\bin\\\"");

    }
}

It's Windows path: "C:\Program Files\Java\jdk1.7.0\bin"
It's Java string: \"C:\\Program Files\\Java\\jdk1.7.0\\bin\"
"

Process finished with exit code 0


*********


package com.javarush.test.level03.lesson06.task05;

/* Изучаем японский
Выведи на экран ???
*/

public class Solution
{
    public static void main(String[] args)
    {
        //напишите тут ваш код
        System.out.print("???");
    }
}

???
Process finished with exit code 0


*********


package com.javarush.test.level03.lesson08.task01;

/* Как захватить мир
Ввести с клавиатуры число и имя, вывести на экран строку:
«имя» захватит мир через «число» лет. Му-ха-ха!
Пример: Вася захватит мир через 8 лет. Му-ха-ха!

Последовательность вводимых данных имеет большое значение.
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
		// ключевой момент в задании - сначала ЧИСЛО потом уже ИМЯ
		
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String age = reader.readLine();
        String name = reader.readLine();

        System.out.println(name + " захватит мир через " + age + " лет." + " Му-ха-ха!");

    }
}


*******


package com.javarush.test.level03.lesson08.task02;

/* Зарплата через 5 лет
Ввести с клавиатуры отдельно Имя, число1, число2. Вывести надпись:
«Имя» получает «число1» через «число2» лет.
Пример: Коля получает 3000 через 5 лет.
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        String name = reader.readLine();
        String money = reader.readLine();
        String age = reader.readLine();

        System.out.println(name + " получает " + money + " через " + age + " лет.");

    }
}


*********


package com.javarush.test.level04.lesson01.task01;

/* Shadowing variables
Подумайте, что делает программа.
Исправьте ошибку в программе чтобы переменная age объекта person изменила свое значение.
Подсказка: тщательно просмотрите метод adjustAge
*/
public class Solution
{
    public static void main(String[] args) {

        Person person = new Person();
        System.out.println("Age is: " + person.age);
        person.adjustAge(person.age);
        System.out.println("Adjusted Age is: " + person.age);
    }

    public static class Person
    {
        public int age = 20;

        public void adjustAge(int age)
        {
            this.age = age + 20;
            System.out.println("The Age in adjustAge() is " + this.age);
        }
    }
}


********


package com.javarush.test.level04.lesson01.task02;

/* Реализовать метод addPrice
Реализовать метод addPrice(int applesPrice), чтобы при его вызове суммарная стоимость яблок увеличивалось на переданное значение.
За суммарную стоимость яблок отвечает переменная public static int applesPrice.
*/
public class Solution
{
    public static void main(String[] args) {
        Apple apple = new Apple();
        Apple.addPrice(50);
        Apple apple2 = new Apple();
        Apple.addPrice(100);
        System.out.println("Apples price is " + Apple.applesPrice);
    }

    public static class Apple{
        public static int applesPrice = 0;

        public static void addPrice(int applesPrice){
            //напишите тут ваш код
            Apple.applesPrice = applesPrice + applesPrice;
            

        }
    }
}

// Ошибка в 6-ой строке. this пишется в обычных переменных класса, а у тебя статическая. Пиши Apple вместо this.


*******


package com.javarush.test.level04.lesson02.task01;

/* Реализовать метод setName
Реализовать метод setName, чтобы с его помощью можно было устанавливать значение переменной private String name равное переданному параметру String name.
*/

public class Cat {
    private String name;

    public void setName(String name) {
        //напишите тут ваш код
        this.name = name;
    }
}


*********


package com.javarush.test.level04.lesson02.task02;

/* Реализовать метод addNewCat
Реализовать метод addNewCat, чтобы при его вызове (т.е. добавлении нового кота), количество котов увеличивалось на 1. За количество котов отвечает переменная catsCount.
*/

public class Cat {
    private static int catsCount = 0;

    public static void addNewCat() {
        //напишите тут ваш код
        catsCount ++;
    }
}


*********


package com.javarush.test.level04.lesson02.task03;

/* Реализовать метод setCatsCount
Реализовать метод setCatsCount так, чтобы с его помощью можно было устанавливать значение переменной catsCount равное переданному параметру.
*/

public class Cat {
    private static int catsCount = 0;

    public static void setCatsCount(int catsCount) {
        Cat.catsCount = catsCount;
    }
}


*********


package com.javarush.test.level04.lesson02.task04;

/* Реализовать метод setName
Реализовать метод setName, чтобы с его помощью можно было устанавливать значение переменной private String fullName равное значению локальной переменной String fullName.
*/

public class Cat {
    private String fullName;

    public void setName(String firstName, String lastName) {
        String fullName = firstName + " " + lastName;

        //напишите тут ваш код
        this.fullName = fullName;
    }
}


*********


package com.javarush.test.level04.lesson02.task05;

/* Подсчитать количество котов
Написать код, чтобы правильно считалось количество созданных котов (count) и на экран выдавалось правильно их количество.
*/

public class Solution
{
    public static void main(String[] args)
    {
        Cat cat1 = new Cat();
        //напишите тут ваш код
        Cat.count ++;

        Cat cat2 = new Cat();
        //напишите тут ваш код
        Cat.count ++;


        System.out.println("Cats count is " + Cat.count);
    }
    public static class Cat
    {
        public static int count = 0;
    }
}


********


package com.javarush.test.level04.lesson04.task01;

/* Меньше 5 - и
Реализовать метод compare(int a). Метод должен выводить строку на экран "Число меньше 5", если параметр метода меньше 5 - и,
выводить строку "Число больше 5", если параметр метода больше 5 - и,
и выводить строку "Число равно 5", если параметр метода равен 5 - и.
*/

public class Solution
{
    public static void main(String[] args)
    {
        compare(3);
        compare(6);
        compare(5);
    }

    public static void compare(int a)
    {
        //напишите тут ваш код
        if (a < 5)
            System.out.println("Число меньше 5");
        else if (a > 5)
            System.out.println("Число больше 5");
        else
            System.out.println("Число равно 5");
    }
}


**********


package com.javarush.test.level04.lesson04.task02;

/* Ближайшее к 10
Реализовать метод closeToTen. Метод должен выводить на экран ближайшее к 10 из двух чисел, записанных в аргументах метода.
Например, среди чисел 8 и 11 ближайшее к десяти 11. Если оба числа на равной длине к 10, то вывести на экран любое из них.
Подсказка:  используйте метод public static int abs(int a), который возвращает абсолютную величину числа.
*/

public class Solution
{
    public static void main(String[] args)
    {
        closeToTen(8,11);
        closeToTen(14,7);
    }

    public static void closeToTen(int a, int b)
    {
        //::CODE:
        if (abs(a - 10) > abs(b - 10))
            System.out.println(b);
        else
            System.out.println(a);

    }

    public static int abs(int a)
    {
        if (a < 0) {
            return -a;
        } else {
            return a;
        }
    }
}


********


package com.javarush.test.level04.lesson04.task03;

/* Интервал
Реализовать метод checkInterval. Метод должен проверять попало ли целое число в интервал от 50 до 100
и сообщить результат на экран в следующем виде: "Число а не содержится в интервале." или "Число а содержится в интервале.",
где  а - аргумент метода.
Пример для числа 112:
Число 112 не содержится в интервале.
Пример для числа 60:
Число 60 содержится в интервале.
*/

public class Solution
{
    public static void main(String[] args) {
        checkInterval(60);
        checkInterval(112);
    }

    public static void checkInterval(int a){
        //::CODE:
        if (50 < a  && a < 100)
            System.out.println("Число " + a + " содержится в интервале.");
        else
            System.out.println("Число " + a + " не содержится в интервале.");
    }
}

// была ошибка - забыл поставить точки в конце предложений


********

package com.javarush.test.level04.lesson04.task04;

/* Время года
Реализовать метод checkSeason. По номеру месяца, метод должен определить время года (зима, весна, лето, осень) и вывести на экран.
Пример для номера месяца 2:
зима
Пример для номера месяца 5:
весна
*/

public class Solution
{
    public static void main(String[] args) {
        checkSeason(12);
        checkSeason(4);
        checkSeason(7);
        checkSeason(10);
    }

    public static void checkSeason(int mount){
        //::CODE:
        if (mount<3 || mount==12)
            System.out.println("зима");

        else if (mount>2 && mount<6)
            System.out.println("весна");

        else if (mount>5 && mount<9)
            System.out.println("лето");

        else
            System.out.println("осень");
    }
}



********


package com.javarush.test.level04.lesson04.task05;

/* Положительное и отрицательное число
Ввести с клавиатуры число. Если число положительное, то увеличить его в два раза. Если число отрицательное, то прибавить единицу.
Вывести результат на экран.
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String a = reader.readLine();
        int age = Integer.parseInt(a);

        if (age < 0)
            System.out.println(age + 1);
        else
            System.out.println(age*2);
    }

}


********


package com.javarush.test.level04.lesson04.task06;

/* День недели
Ввести с клавиатуры номер дня недели, в зависимости от номера вывести название «понедельник», «вторник», «среда», «четверг», «пятница», «суббота», «воскресенье»,
если введен номер больше или меньше 7 – вывести «такого дня недели не существует».
Пример для номера 5:
пятница
Пример для номера 10:
такого дня недели не существует
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String c = reader.readLine();
        int a = Integer.parseInt(c);

        if (a == 1)
            System.out.println("понедельник");
        else if (a == 2)
            System.out.println("вторник");
        else if (a == 3)
            System.out.println("среда");
        else if (a == 4)
            System.out.println("четверг");
        else if (a == 5)
            System.out.println("пятница");
        else if (a == 6)
            System.out.println("суббота");
        else if (a == 7)
            System.out.println("воскресенье");
        else
            System.out.println("такого дня недели не существует");
    }
}

// Была ошибка - проверял равнение в условии оператором "=", а надо было "=="


*********


package com.javarush.test.level04.lesson04.task07;

/* Количество дней в году
Ввести с клавиатуры год, определить количество дней в году. Результат вывести на экран в следующем виде:
"количество дней в году: x", где х - 366 для високосными года, х - 365 для обычного года.
Подсказка: В високосном году - 366 дней, тогда как в обычном  - 365.
Високосным годом является каждый четвёртый год, за исключением столетий, которые не кратны 400.
Так, годы 1700, 1800 и 1900 не являются високосными, так как они кратны 100 и не кратны 400.
Годы 1600 и 2000 — високосные, так как они кратны 100 и кратны 400.
Годы 2100, 2200 и 2300 — невисокосные.
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String c = reader.readLine();
        int a = Integer.parseInt(c);

        if (a % 4 != 0){
            a = 365;
            System.out.println("количество дней в году: " + a);}
			
        else if (a % 4 == 0)
        {
            if ((a % 100 == 0) && (a % 400 != 0)){
                a = 365;
                System.out.println("количество дней в году: " + a);}
            else{
                a = 366;
                System.out.println("количество дней в году: " + a);}
        }
        else{}
    }
}


********


package com.javarush.test.level04.lesson04.task08;

/* Треугольник
Ввести с клавиатуры три числа а, b, c – стороны предполагаемого треугольника.
Определить возможность существования треугольника по сторонам. Результат вывести на экран в следующем виде:
"Треугольник существует." - если треугольник с такими сторонами существует.
"Треугольник не существует." - если треугольник с такими сторонами не существует.
Подсказка: Треугольник существует только тогда, когда сумма любых двух его сторон больше третьей.
Требуется сравнить каждую сторону с суммой двух других.
Если хотя бы в одном случае сторона окажется больше суммы двух других, то треугольника с такими сторонами не существует.
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        String y = reader.readLine();
        String z = reader.readLine();
        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        int c = Integer.parseInt(z);

        if ((a < (b+c)) && (b < (a+c)) && (c < (b+a)))
            System.out.println("Треугольник существует.");
        
        else
            System.out.println("Треугольник не существует.");
    }
}

// Сначала я пытался проверять по одному условию используя else if, но в этом случае будет ошибка, т.к. проверяется только одна сторона, а надо все три стороны одновременно. Поэтому здесь оператор И, а не ИЛИ


*********


package com.javarush.test.level04.lesson04.task09;

/* Светофор
Работа светофора для пешеходов запрограммирована следующим образом: в начале каждого часа в течение трех минут горит зеленый сигнал,
затем в течение одной минуты — желтый, а потом в течение одной минуты — красный, затем опять зеленый горит три минуты и т. д.
Ввести с клавиатуры вещественное число t, означающее время в минутах, прошедшее с начала очередного часа.
Определить, сигнал какого цвета горит для пешеходов в этот момент.
Результат вывести на экран в следующем виде:
"зеленый" - если горит зеленый цвет, "желтый" - если горит желтый цвет, "красный" - если горит красный цвет.
Пример для числа 2.5:
зеленый
Пример для числа 3:
желтый
Пример для числа 4:
красный
Пример для числа 5:
зеленый
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        double t = Double.parseDouble(x);

        if ((t%5==0) || (t%5>0 && (t%5<3)))
            System.out.println("зеленый");
        else if ((t%5==3) || (t%5>3 && (t%5<4)))
            System.out.println("желтый");
        else if ((t%5==4) || (t%5>4 && (t%5<5)))
            System.out.println("красный");
        else {}

    }
}

// Программа не работала с условием ((t%5==0) && (t%5<3)), ей этого было мало, она не проверяла промежуточные цифры типо 2,5 или 8,5. Пришлось добавить уточнение, полное опсиание длины от и до (t%5>0 && (t%5<3)). 


*********


package com.javarush.test.level04.lesson04.task10;

/* Три числа
Ввести с клавиатуры три целых числа. Определить, имеется ли среди них хотя бы одна пара равных между собой чисел.
Если такая пара существует, вывести на экран числа через пробел. Если все три числа равны между собой, то вывести все три.
Пример для чисел 1 2 2:
2 2
Пример для чисел 2 2 2:
2 2 2
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        String y = reader.readLine();
        String z = reader.readLine();
        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        int c = Integer.parseInt(z);

        if ((a == b) && (b == c))
            System.out.println(a + " " + b + " " + c);
        else if (a == b)
            System.out.println(a + " " + b);
        else if (b == c)
            System.out.println(b + " " + c);
        else if (a == c)
            System.out.println(a + " " + c);
        else {}

    }
}


**********


package com.javarush.test.level04.lesson06.task02;

/* Максимум четырех чисел
Ввести с клавиатуры четыре числа, и вывести максимальное из них.
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        String y = reader.readLine();
        String z = reader.readLine();
        String w = reader.readLine();

        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        int c = Integer.parseInt(z);
        int d = Integer.parseInt(w);

        if ((a + b) > (c + d))
            if (a > b)
                System.out.println(a);
            else
                System.out.println(b);
        else if ((a + b) < (c + d))
            if (c > d)
                System.out.println(c);
            else
                System.out.println(d);
        else {}


    }
}


**********


package com.javarush.test.level04.lesson06.task03;

/* Сортировка трех чисел
Ввести с клавиатуры три числа, и вывести их в порядке убывания.
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        String y = reader.readLine();
        String z = reader.readLine();

        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        int c = Integer.parseInt(z);


        if (a > b && a > c)
            if (b > c)
                System.out.println(a + " " + b + " " + c);
            else
                System.out.println(a + " " + c + " " + b);
        else if (b > a && b > c)
            if (a > c)
                System.out.println(b + " " + a + " " + c);
            else
                System.out.println(b + " " + c + " " + a);
        else if (c > a && c > b)
            if (a > b)
                System.out.println(c + " " + a + " " + b);
            else
                System.out.println(c + " " + b + " " + a);
        else {}

    }
}


*********


package com.javarush.test.level04.lesson06.task04;

/* Сравнить имена
Ввести с клавиатуры два имени, и если имена одинаковые вывести сообщение «Имена идентичны». Если имена разные, но их длины равны – вывести сообщение – «Длины имен равны».
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String name1 = reader.readLine();
        String name2 = reader.readLine();

        int length1 = name1.length();
        int length2 = name2.length();

        if (name1.equals(name2))
            System.out.println("Имена идентичны");
        else if (length1 == length2)
            System.out.println("Длины имен равны");
        else {}
    }
}

// При решении  использовал просто оператор "==" вместо "equals" и все работало, но сервер выдал ответ, что программа не прошла проверку. Наверное нужно тщательнее изучить == и equals.


*********


package com.javarush.test.level04.lesson06.task07;

/* Три числа
Ввести с клавиатуры три целых числа. Одно из чисел отлично от двух других, равных между собой.
Вывести на экран порядковый номер числа, отличного от остальных.
Пример для чисел 4 6 6:
1
Пример для чисел 6 6 3:
3
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        String y = reader.readLine();
        String z = reader.readLine();

        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        int c = Integer.parseInt(z);

        if (b == c)
            System.out.println(1);
        else if (a == c)
            System.out.println(2);
        else
            System.out.println(3);

    }
}


********


package com.javarush.test.level04.lesson06.task08;

/* Координатные четверти
Ввести с клавиатуры два целых числа, которые будут координатами точки, не лежащей на координатных осях OX и OY.
Вывести на экран номер координатной четверти, в которой находится данная точка.
Подсказка:
Принадлежность точки с координатами (a,b) к одной из четвертей определяется следующим образом:
для первой четверти a>0 и b>0;
для второй четверти a<0 и b>0;
для третьей четверти a<0 и b<0;
для четвертой четверти a>0 и b<0.
Пример для чисел 4 6:
1
Пример для чисел -6 -6:
3
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        String y = reader.readLine();

        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);

        if (a>0 && b>0)
            System.out.println(1);
        else if (a<0 && b>0)
            System.out.println(2);
        else if (a<0 && b<0)
            System.out.println(3);
        else
            System.out.println(4);
    }
}


********


package com.javarush.test.level04.lesson07.task01;

/* Строка - описание
Ввести с клавиатуры целое число. Вывести на экран его строку-описание следующего вида:
«отрицательное четное число» - если число отрицательное и четное,
«отрицательное нечетное число» - если число отрицательное и нечетное,
«нулевое число» - если число равно 0,
«положительное четное число» - если число положительное и четное,
«положительное нечетное число» - если число положительное и нечетное.
Пример для числа 100:
положительное четное число
Пример для числа -51:
отрицательное нечетное число
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        int a = Integer.parseInt(x);

        if (a < 0)
            if (a%2 == 0)
                System.out.println("отрицательное четное число");
            else
                System.out.println("отрицательное нечетное число");
        else if (a == 0)
            System.out.println("нулевое число");
        else if (a > 0)
            if (a%2 == 0)
                System.out.println("положительное четное число");
            else
                System.out.println("положительное нечетное число");
        else {}

    }
}


*********


package com.javarush.test.level04.lesson07.task02;

/* Строка - описание
Ввести с клавиатуры целое число в диапазоне 1 - 999. Вывести его строку-описание следующего вида:
«четное однозначное число» - если число четное и имеет одну цифру,
«нечетное однозначное число» - если число нечетное и имеет одну цифру,
«четное двузначное число» - если число четное и имеет две цифры,
«нечетное двузначное число» - если число нечетное и имеет две цифры,
«четное трехзначное число» - если число четное и имеет три цифры,
«нечетное трехзначное число» - если число нечетное и имеет три цифры.
Если введенное число не попадает в диапазон 1 - 999, в таком случае ничего не выводить на экран.
Пример для числа 100:
четное трехзначное число
Пример для числа 51:
нечетное двузначное число
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        int a = Integer.parseInt(x);

        if (a>0 && a<10)
            if (a%2 == 0)
                System.out.println("четное однозначное число");
            else
                System.out.println("нечетное однозначное число");

        else if (a>9 && a<100)
            if (a%2 == 0)
                System.out.println("четное двузначное число");
            else
                System.out.println("нечетное двузначное число");

        else if (a>99 && a<1000)
            if (a%2 == 0)
                System.out.println("четное трехзначное число");
            else
                System.out.println("нечетное трехзначное число");

        else {}

    }
}


**********


package com.javarush.test.level04.lesson07.task03;

/* Положительные числа
Ввести с клавиатуры три целых числа. Вывести на экран количество положительных чисел в исходном наборе.
Пример для чисел -4 6 6:
2
Пример для чисел -6 -6 -3:
0
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        String y = reader.readLine();
        String z = reader.readLine();

        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        int c = Integer.parseInt(z);

        if (a>0)
            if (b>0)
                if (c>0)
                    System.out.println(3);
                else
                    System.out.println(2);
            else
                if(c>0)
                    System.out.println(2);
                else
                    System.out.println(1);
        else
            if (b>0)
                if (c>0)
                    System.out.println(2);
                else
                    System.out.println(1);
            else
                if(c>0)
                    System.out.println(1);
                else
                    System.out.println(0);

    }
}


********


package com.javarush.test.level04.lesson07.task04;

/* Положительные и отрицательные числа
Ввести с клавиатуры три целых числа. Вывести на экран количество положительных и количество отрицательных чисел в исходном наборе,
в следующем виде:
"количество отрицательных чисел: а", "количество положительных чисел: б", где а, б - искомые значения.
Пример для чисел 2 5 6:
количество отрицательных чисел: 0
количество положительных чисел: 3
Пример для чисел -2 -5 6:
количество отрицательных чисел: 2
количество положительных чисел: 1
*/

import java.io.*;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        String y = reader.readLine();
        String z = reader.readLine();

        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        int c = Integer.parseInt(z);


        if (a>0)
            if (b>0)
                if (c>0)
                {
                    System.out.println("количество отрицательных чисел: " + 0);
                    System.out.println("количество положительных чисел: " + 3);
                }
                else
                {
                    System.out.println("количество отрицательных чисел: " + 1);
                    System.out.println("количество положительных чисел: " + 2);
                }
            else
                if(c>0)
                {
                    System.out.println("количество отрицательных чисел: " + 1);
                    System.out.println("количество положительных чисел: " + 2);
                }
                else
                {
                    System.out.println("количество отрицательных чисел: " + 2);
                    System.out.println("количество положительных чисел: " + 1);
                }
        else
            if (b>0)
                if (c>0)
                {
                    System.out.println("количество отрицательных чисел: " + 1);
                    System.out.println("количество положительных чисел: " + 2);
                }
                else
                {
                    System.out.println("количество отрицательных чисел: " + 2);
                    System.out.println("количество положительных чисел: " + 1);
                }
            else
                if(c>0)
                {
                    System.out.println("количество отрицательных чисел: " + 2);
                    System.out.println("количество положительных чисел: " + 1);
                }
                else
                {
                    System.out.println("количество отрицательных чисел: " + 3);
                    System.out.println("количество положительных чисел: " + 0);
                }
    }
}


*********


package com.javarush.test.level04.lesson10.task01;

import java.io.*;

/* 10 чисел
Вывести на экран числа от 1 до 10 используя цикл while.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        int i = 1;
        while (i<11)
        {
            System.out.println(i);
            i++;
        }

    }
}


********

package com.javarush.test.level04.lesson10.task02;

import java.io.*;

/* 10 чисел наоборот
Вывести на экран числа от 10 до 1 используя цикл while.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        int i = 10;
        while (i != 0)
        {
            System.out.println(i);
            i--;
        }

    }
}


**********

package com.javarush.test.level04.lesson10.task03;

import java.io.*;

/* Хорошего не бывает много
Ввести с клавиатуры строку и число N.
Вывести на экран строку N раз используя цикл while.
Пример ввода:
абв
2
Пример вывода:
абв
абв
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String s = reader.readLine();
        String x = reader.readLine();
        int N = Integer.parseInt(x);

        while (N > 0)
        {
            System.out.println(s);
            N--;
        }
    }
}

// Ошибка была в том, что я забыл поставить фигурные скобки в цикле while


*********


package com.javarush.test.level04.lesson10.task04;

import java.io.*;

/* S-квадрат
Вывести на экран квадрат из 10х10 букв S используя цикл while.
Буквы в каждой строке не разделять.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        int i = 1;
        while (i<11)
        {
            System.out.println("SSSSSSSSSS");
            i++;

        }

    }
}

// Не заметил, что в условии S большая прописная буква и делал с маленькой, проверка не проходила. Начал строить из двух циклов, а потом заметил ошибку и исправил маленькую s на прописную S и программа прошла проверку.


*********


package com.javarush.test.level04.lesson10.task05;

import java.io.*;

/* Таблица умножения
Вывести на экран таблицу умножения 10х10 используя цикл while.
Числа разделить пробелом.
1 2 3 4 5 6 7 8 9 10
2 4 6 8 10 12 14 16 18 20
...
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        int i = 1;
        

        while (i<11)
        {

            System.out.println(i * 1 + " " + i * 2 + " " + i * 3 + " " + i * 4 + " " + i * 5 + " " + i * 6 + " " + i * 7 + " " + i * 8 + " " + i * 9 + " " + i * 10);
            i++;

        }

    }
}


********


package com.javarush.test.level04.lesson13.task01;

/* Четные числа
Используя цикл for вывести на экран чётные числа от 1 до 100 включительно.
Через пробел либо с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        for (int i=1; i<=100; i++)
        {
            if (i%2 == 0)
               System.out.println(i);
        }

    }
}


**********


package com.javarush.test.level04.lesson13.task02;

import java.io.*;

/* Рисуем прямоугольник
Ввести с клавиатуры два числа m и n.
Используя цикл for вывести на экран прямоугольник размером m на n из восьмёрок.
Пример: m=2, n=4
8888
8888
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String a = reader.readLine();
        String b = reader.readLine();
        int m = Integer.parseInt(a);
        int n = Integer.parseInt(b);

        for (int i = 1; i<=m; i++)
        {
            for (int c = 1; c<=n; c++)
            {
                System.out.print(8);
            }
            System.out.println();
        }
    }
}


********

package com.javarush.test.level04.lesson13.task03;

import java.io.*;

/* Рисуем треугольник
Используя цикл for вывести на экран прямоугольный треугольник из восьмёрок со сторонами 10 и 10.
Пример:
8
88
888
...
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        String s = "8";

        for (int i = 1; i<=10; i++)
        {
           System.out.println(s);
           s = s + 8;
        }
    }
}

или, проверить этот вариант:

        int a = 8;
        int b = 10;
        for (int x=1;x<=b;x++){
            for (int y=1;y<=x;y++){
                System.out.print(a);
            }
            System.out.println();


			
**********


package com.javarush.test.level04.lesson13.task04;

import java.io.*;

/* Рисуем линии
Используя цикл for вывести на экран:
- горизонтальную линию из 10 восьмёрок
- вертикальную линию из 10 восьмёрок.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        for (int i = 1; i <=10; i++)
        {
            System.out.print(8);
        }
        
        System.out.println();

        for (int i = 1; i<=10; i++)
        {
            System.out.println(8);
        }

    }
}


********


package com.javarush.test.level04.lesson13.task05;

import java.io.*;

/* Все любят Мамбу
Ввести с клавиатуры имя и используя цикл for 10 раз вывести: [*имя* любит меня.]
Пример текста:
Света любит меня.
Света любит меня.
…
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String a = reader.readLine();

        String s = (a + " любит меня.");

        for (int i =1; i <=10; i++)
        {
            System.out.println(s);
        }
    }
}


*******


package com.javarush.test.level04.lesson16.home02;

import java.io.*;

/* Среднее такое среднее
Ввести с клавиатуры три числа, вывести на экран среднее из них. Т.е. не самое большое и не самое маленькое.
*/

public class Solution
{
    public static void main(String[] args)   throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String x = reader.readLine();
        String y = reader.readLine();
        String z = reader.readLine();

        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        int c = Integer.parseInt(z);

        if (a > b && a > c){
            if (b > c)
                System.out.println(b);
            else
                System.out.println(c);}
        else if (b > a && b > c){
                if (a > c)
                    System.out.println(a);
                else
                    System.out.println(c);}
        else if (c > a && c > b){
            if (a > b)
                System.out.println(a);
            else
                System.out.println(b);}
        else {}
    }
}


*******


package com.javarush.test.level04.lesson16.home03;

import java.io.*;

/* Посчитать сумму чисел
Вводить с клавиатуры числа и считать их сумму. Если пользователь ввел -1, вывести на экран сумму и завершить программу.  -1 должно учитываться в сумме.
*/

public class Solution
{
    public static void main(String[] args)   throws Exception
    {
        //напишите тут ваш код
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

            int i = 0;
            int sum = 0;
            do
            {
                i = Integer.parseInt(reader.readLine());
                sum += i;

            } while (i != -1);
            System.out.println(sum);
    }
}

// Эту задачу нужно рассмотреть, решение нашел в инете, не сам придумал. Не понимаю почему происходит сначала вычитание единцы, при -1, а потом уже вывод суммы.
		

******


package com.javarush.test.level04.lesson16.home04;

import java.io.*;

/* Меня зовут 'Вася'...
Ввести с клавиатуры строку name.
Ввести с клавиатуры дату рождения (три числа): y, m, d.
Вывести на экран текст:
«Меня зовут name
Я родился d.m.y»
Пример:
Меня зовут Вася
Я родился 15.2.1988
*/

public class Solution
{
    public static void main(String[] args)   throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String name = reader.readLine();
        String a = reader.readLine();
        String b = reader.readLine();
        String c = reader.readLine();

        int y = Integer.parseInt(a);
        int m = Integer.parseInt(b);
        int d = Integer.parseInt(c);

        System.out.println("Меня зовут " + name);
        System.out.println("Я родился " + d + "." + m + "." +y);
    }
}

// Прошла проверку на сервере с 6 попытки, т.к. не заметил, что в условии указаны конкретные имена переменных, а также порядок их ввода (y, m, d) и вывода (d.m.y). Внимательность всегда нужна в первую очередь!!!


********

package com.javarush.test.level05.lesson05.task01;

/* Создать класс Cat
Создать класс Cat. У кота должно быть имя (name, String), возраст (age, int), вес (weight, int), сила (strength, int).
*/

public class Cat
{
    //напишите тут ваш код
    public String name;

    public int age;
    public int weight;
    public int strength;

}


***********


package com.javarush.test.level05.lesson05.task02;

/* Реализовать метод fight
Реализовать метод boolean fight(Cat anotherCat):
реализовать механизм драки котов в зависимости от их веса, возраста и силы.
Зависимость придумать самому. Метод должен определять, выиграли ли мы (this) бой или нет,
т.е. возвращать true, если выиграли и false - если нет.
Должно выполняться условие:
если cat1.fight(cat2) = true , то cat2.fight(cat1) = false
*/

public class Cat
{
    public String name;
    public int age;
    public int weight;
    public int strength;

    public Cat()
    {
    }

    public boolean fight(Cat anotherCat)
    {
        //напишите тут ваш код

        if (this.strength > anotherCat.strength)
            return true;
        else
            return false;
    }
}

// Как видим, в задании нужно лишь сделать логику определения победы бойца, и мы её успешно сделали.

		
		
*********


package com.javarush.test.level05.lesson05.task03;

/* Геттеры и сеттеры для класса Dog
Создать class Dog. У собаки должна быть кличка String name и возраст int age.
Создайте геттеры и сеттеры для всех переменных класса Dog.
*/

public class Dog {
    //добавьте тут переменные класса
    public String name;
    public int age;

    //добавьте тут геттеры и сеттеры
    public String getName()
    {
        return name;
    }

    public int getAge()
    {
        return age;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public void setAge(int age)
    {
        this.age = age;
    }
}


**********


package com.javarush.test.level05.lesson05.task04;

/* Создать три объекта типа Cat
В методе main создать три объекта типа Cat и заполнить их данными.
Использовать класс Cat из первой задачи. Класс Cat создавать не надо.
*/

public class Solution {
    public static void main(String[] args) {
        //напишите тут ваш код

        Cat cat1 = new Cat("Bob", 5, 5, 5);
        Cat cat2 = new Cat("Bim", 6, 6, 6);
        Cat cat3 = new Cat("Bill", 7, 7, 7);

    }

    public static class Cat {

        public static int count = 0;
        private String name;
        private int age;
        private int weight;
        private int strength;

        public Cat(String name, int age, int weight, int strength) {
            count++;

            this.name = name;
            this.age = age;
            this.weight = weight;
            this.strength = strength;
        }
    }
}

// public Cat  -  это конструктор класса, благодаря ему нам не нужно писать строки вида cat1.name = "Bob" и т.д. для каждого аргумента. Удобная конструкция получается с этими конструкторами (такая вот тавтология).


**********


package com.javarush.test.level05.lesson05.task05;

/* Провести три боя  попарно между котами
Создать три кота используя класс Cat.
Провести три боя попарно между котами.
Класс Cat создавать не надо. Для боя использовать метод boolean fight(Cat anotherCat).
Результат каждого боя вывести на экран.
*/

public class Solution {
    public static void main(String[] args) {
        //напишите тут ваш код
        Cat cat1 = new Cat("Pit", 5, 5, 5);
        Cat cat2 = new Cat("Bob", 6, 6, 6);
        Cat cat3 = new Cat ("Tim", 7, 7, 7);

        System.out.println(cat1.fight(cat2));
        System.out.println(cat2.fight(cat3));
        System.out.println(cat1.fight(cat3));
    }

    public static class Cat {

        public static int count = 0;
        public static int fightCount = 0;

        protected String name;
        protected int age;
        protected int weight;
        protected int strength;

        public Cat(String name, int age, int weight, int strength) {
            count++;

            this.name = name;
            this.age = age;
            this.weight = weight;
            this.strength = strength;
        }

        public boolean fight(Cat anotherCat) {
            fightCount++;

            int agePlus = this.age > anotherCat.age ? 1 : 0;
            int weightPlus = this.weight > anotherCat.weight ? 1 : 0;
            int strengthPlus = this.strength > anotherCat.strength ? 1 : 0;

            int score = agePlus + weightPlus + strengthPlus;
            return score > 2; // return score > 2 ? true : false;
        }
    }
}

false
false
false

Process finished with exit code 0

/*
Если мы поменяем вывод на другой, например:
        System.out.println(cat3.fight(cat1));
        System.out.println(cat3.fight(cat2));
        System.out.println(cat2.fight(cat1));
		
- то увидим, что все три боя вернут нам True, т.е. наш метод как-бы задает вопрос -  "победит ли кот cat3 кота cat1?", а не просто - "кто выиграет?". Это важно, ведь от вида вопроса зависит ответ, что наглядно подтверждают наши примеры. В первом случае мы спрашивали победит ли первый кот1 второго и третьего и конечно же получили ответ False (т.к. он слабее их по параметрам).


*********


package com.javarush.test.level05.lesson07.task01;

/* Создать класс Friend
Создать класс Friend (друг) с тремя инициализаторами (тремя методами initialize):
- Имя
- Имя, возраст
- Имя, возраст, пол
*/

public class Friend
{
    //напишите тут ваш код
    private String name;
    private int age;
    private String pol;


    public void initialize(String name)
    {
        this.name = name;
    }

    public void initialize(String name, int age)
    {
        this.name = name;
        this.age = age;
    }

    public void initialize(String name, int age, String pol)
    {
        this.name = name;
        this.age = age;
        this.pol = pol;
    }

}


*********


package com.javarush.test.level05.lesson07.task02;

/* Создать класс Cat
Создать класс Cat (кот) с пятью инициализаторами:
- Имя,
- Имя, вес, возраст
- Имя, возраст (вес стандартный)
- вес, цвет, (имя, адрес и возраст неизвестны, это бездомный кот)
- вес, цвет, адрес ( чужой домашний кот)
Задача инициализатора – сделать объект валидным. Например, если вес неизвестен, то нужно указать
какой-нибудь средний вес. Кот не может ничего не весить. То же касательно возраста. А вот имени может и не быть (null).
То же касается адреса: null.
*/

public class Cat
{
    //напишите тут ваш код
    private String name;
    private int weight = 5;
    private int age = 5;
    private String color;
    private String address;

    public void initialize(String name)
    {
        this.name = name;
    }

    public void initialize(String name, int weight, int age)
    {
        this.name = name;
        this.weight = weight;
        this.age = age;
    }

    public void initialize(String name, int age)
    {
        this.name = name;
        this.age = age;

    }

    public void initialize(int weight, String color)
    {
        this.weight = weight;
        this.color = color;

    }

    public void initialize(int weight, String color, String address)
    {
        this.weight = weight;
        this.color = color;
        this.address = address;
    }

}


**********


package com.javarush.test.level05.lesson07.task03;

/* Создать класс Dog
Создать класс Dog (собака) с тремя инициализаторами:
- Имя
- Имя, рост
- Имя, рост, цвет
*/

public class Dog
{
    //напишите тут ваш код
    String name;
    int rost;
    String color;

    public void initialize(String name)
    {
        this.name = name;
    }

    public void initialize(String name, int rost)
    {
        this.name = name;
        this.rost = rost;

    }

    public void initialize(String name, int rost, String color)
    {
        this.name = name;
        this.rost = rost;
        this.color = color;

    }

}


**********


package com.javarush.test.level05.lesson07.task04;

/* Создать класс Circle
Создать класс (Circle) круг, с тремя инициализаторами:
- centerX, centerY, radius
- centerX, centerY, radius, width
- centerX, centerY, radius, width, color
*/

public class Circle
{
    //напишите тут ваш код
    private int centerX;
    private int centerY;
    private int radius;
    private int width;
    private String color;

    public void initialize(int centerX, int centerY, int radius)
    {
        this.centerX = centerX;
        this.centerY = centerY;
        this.radius = radius;
    }

    public void initialize(int centerX, int centerY, int radius, int width)
    {
        this.centerX = centerX;
        this.centerY = centerY;
        this.radius = radius;
        this.width = width;
    }

    public void initialize(int centerX, int centerY, int radius, int width, String color)
    {
        this.centerX = centerX;
        this.centerY = centerY;
        this.radius = radius;
        this.width = width;
        this.color = color;
    }
}


*********


package com.javarush.test.level05.lesson09.task01;

/* Создать класс Friend
Создать класс Friend (друг) с тремя конструкторами:
- Имя
- Имя, возраст
- Имя, возраст, пол
*/

public class Friend
{
    //напишите тут ваш код
    private String name;
    private int age;
    private String pol;

    public Friend(String name)
    {
        this.name = name;
    }

    public Friend(String name, int age)
    {
        this.name = name;
        this.age = age;
    }

    public Friend(String name, int age, String pol)
    {
        this.name = name;
        this.age = age;
        this.pol = pol;
    }
}


**********

package com.javarush.test.level05.lesson07.task05;

/* Создать класс прямоугольник (Rectangle)
Создать класс прямоугольник (Rectangle). Его данными будут top, left, width, height (левая координата, верхняя, ширина и высота). Создать для него как можно больше методов initialize(…)
Примеры:
-	заданы 4 параметра: left, top, width, height
-	ширина/высота не задана (оба равны 0)
-	высота не задана (равно ширине) создаём квадрат
-	создаём копию другого прямоугольника (он и передаётся в параметрах)
*/

public class Rectangle
{
    //напишите тут ваш код
    int top;
    int left;
    int width;
    int height;
    public void initialize(int left, int top, int width, int height)
    {
        this.left = left;
        this.top = top;
        this.width = width;
        this.height = height;
    }
    public void initialize(int left,  int top)
    {
        this.left = left;
        this.top = top;
        this.width = 0;
        this.height = 0;
    }
    public void initialize(int left, int top, int width )
    {
        this.left = left;
        this.top = top;
        this.width = width;
        this.height = width;
    }
    public void initialize(Rectangle anotheRectangle)
    {
        anotheRectangle = this;
    }

}


**********


package com.javarush.test.level05.lesson12.home02;

/* Man and Woman
1. Внутри класса Solution создай public static классы Man и Woman.
2. У классов должны быть поля: name(String), age(int), address(String).
3. Создай конструкторы, в которые передаются все возможные параметры.
4. Создай по два объекта каждого класса со всеми данными используя конструктор.
5. Объекты выведи на экран в таком формате [name + " " + age + " " + address].
*/

public class Solution
{
    public static void main(String[] args)
    {
        //создай по два объекта каждого класса тут
        Man man1 = new Man("Pol", 22, "Piter");
        Man man2 = new Man("Pit", 25, "Piter");

        Woman woman1 = new Woman("Pola", 32, "Omsk");
        Woman woman2 = new Woman("Pitta", 35, "Omsk");


        //выведи их на экран тут
        System.out.println(man1.name + " " + man1.age + " " + man1.address);
        System.out.println(man2.name + " " + man2.age + " " + man2.address);
        System.out.println(woman1.name + " " + woman1.age + " " + woman1.address);
        System.out.println(woman2.name + " " + woman2.age + " " + woman2.address);

    }

    //добавьте тут ваши классы

    public static class Man
    {
        public String name;
        public int age;
        public String address;

        public Man(String name, int age, String address)
        {
            this.name = name;
            this.age = age;
            this.address = address;
        }

    }

    public static class Woman
    {
        public String name;
        public int age;
        public String address;

        public Woman(String name, int age, String address)
        {
            this.name = name;
            this.age = age;
            this.address = address;
        }
    }
}


*********


    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int a = Integer.parseInt(reader.readLine());
        int b = Integer.parseInt(reader.readLine());
        int c = Integer.parseInt(reader.readLine());
        int d = Integer.parseInt(reader.readLine());
        int e = Integer.parseInt(reader.readLine());
        

        int minimum = min(a, b, c, d, e);

        System.out.println("Minimum = " + minimum);
    }


    public static int min(int a, int b, int c, int d, int e)
    {
        if ( (a + b + c) < (d + e))
        {
            if ((a<b) && (a<c))
                return a;
            else
            {
                if (b < c)
                    return b;
                else
                    return c;
            }
        }
        else
            return (d<e) & d:e;
        
    }

	
***********

	
package com.javarush.test.level05.lesson12.home03;

/* Создай классы Dog, Cat, Mouse
Создай классы Dog, Cat, Mouse. Добавь по три поля в каждый класс, на твой выбор. Создай объекты для героев мультика Том и Джерри. Так много, как только вспомнишь.
Пример:
Mouse jerryMouse = new Mouse(“Jerry”, 12 , 5), где 12 - высота в см, 5 - длина хвоста в см.
*/

public class Solution
{
    public static void main(String[] args)
    {
        Mouse jerryMouse = new Mouse("Jerry", 12 , 5);
        Cat tom = new Cat("Tom", 25, 25);

        //напишите тут ваш код
    }

    public static class Mouse
    {
        String name;
        int height;
        int tail;

        public Mouse(String name, int height, int tail)
        {
            this.name = name;
            this.height = height;
            this.tail = tail;
        }
    }

    public static class Cat
    {
        String name;
        int height;
        int tail;

        public Cat(String name, int height, int tail)
        {
            this.name = name;
            this.height = height;
            this.tail = tail;
        }
    }

    public static class Dog
    {
        String name;
        int height;
        int tail;

        public Dog(String name, int height, int tail)
        {
            this.name = name;
            this.height = height;
            this.tail = tail;
        }
    }

}


package com.javarush.test.level06.lesson05.task01;

/* Метод finalize класса Cat
В классе Cat создать метод protected void finalize() throws Throwable
*/

public class Cat
{
    //напишите тут ваш код
    protected void finalize() throws Throwable
    {
        
    }

}


************


package com.javarush.test.level06.lesson05.task02;

/* Классы Cat и Dog и метод finalize для каждого
В каждом классе Cat и Dog написать метод finalize, который выводит на экран текст о том, что такой-то объект уничтожен.
*/

public class Cat
{
    //напишите тут ваш код
    protected void finalize() throws Throwable
    {
        System.out.println("destroyed");
    }

}

class Dog
{
    //напишите тут ваш код
    protected void finalize() throws Throwable
    {
        System.out.println("destroyed");
    }

}


**********


package com.javarush.test.level06.lesson05.task03;

/* По 50 000 объектов Cat и Dog
Создать в цикле по 50 000 объектов Cat и Dog. (Java-машина должна начать уничтожать неиспользуемые, и метод finalize хоть раз да вызовется).
*/

public class Solution
{
    public static void main(String[] args)
    {
        //напишите тут ваш код
        int i = 0;
        while (i<50000)
        {
            Cat cat = new Cat();
            Dog dog = new Dog();
        }

    }
}
class Cat
{
    @Override
    protected void finalize() throws Throwable
    {
        super.finalize();
        System.out.println("Cat destroyed");
    }
}

class Dog
{
    @Override
    protected void finalize() throws Throwable
    {
        super.finalize();
        System.out.println("Dog destroyed");
    }
}


*********


package com.javarush.test.level06.lesson05.task04;

/* Cчётчик котов
В конструкторе класса Cat [public Cat()] увеличивать счётчик котов (статическую переменную этого же класса catCount) на 1. В методе finalize уменьшать на 1.
*/

public class Cat
{
    public static int catCount = 0;

    //напишите тут ваш код

    public Cat()
    {
        catCount++;
    }

    protected void finalize() throws Throwable
    {
        catCount--;
    }

    public static void main(String[] args) {
    }
}


***********


package com.javarush.test.level06.lesson08.task01;

/* Класс Cat и статическая переменная catCount
Создать статическую переменную int catCount в классе Cat. Создай конструктор [public Cat()], в котором увеличивай данную переменную на 1.
*/

public class Cat
{
    //напишите тут ваш код
    static  int catCount;

    public Cat()
    {
        catCount++;
    }

}


***************


package com.javarush.test.level06.lesson08.task02;

/* Статические методы: int getCatCount() и setCatCount(int)
Добавить  к классу Cat два статических метода: int getCatCount() и setCatCount(int), с помощью которых можно получить/изменить количество котов (переменную catCount)
*/

public class Cat
{
    private static int catCount = 0;

    public Cat()
    {
        catCount++;
    }

    public static int getCatCount()
    {
        //напишите тут ваш код
        return catCount;

    }

    public static void setCatCount(int catCount)
    {
        //напишите тут ваш код
        Cat.catCount = catCount;

    }
}


************


package com.javarush.test.level06.lesson08.task03;

/* Класс Util
Реализовать статический метод double getDistance(x1, y1, x2, y2). Он должен вычислять расстояние между точками.
Используй метод double Math.sqrt(double a), который вычисляет квадратный корень переданного параметра
*/

import java.math.*;

public class Util
{
    public static double getDistance(int x1, int y1, int x2, int y2)
    {
        //напишите тут ваш код
        double x = ((x2 - x1)*(x2-x1)) + ((y2-y1)*(y2-y1));
        double distance = Math.sqrt(x);
        return distance;
    }
}

// теорема пифагора - вычисляем гипотенузу - расстояние по формуле: корень из (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)
  

************


package com.javarush.test.level06.lesson08.task04;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/* Класс ConsoleReader
Сделать класс ConsoleReader, у которого будут 4 статических метода:
String readString() – читает с клавиатуры строку
int readInt() – читает с клавиатуры число
double readDouble() – читает с клавиатуры дробное число
boolean readBoolean() – читает с клавиатуры строку "true" или "false" и возвращает соответствующую логическую переменную true или false
Внимание: создавайте переменную для чтения данных с консоли (BufferedReader или Scanner) внутри каждого метода
*/

public class ConsoleReader
{
    public static String readString() throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        return reader.readLine();

    }

    public static int readInt() throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        return Integer.parseInt(reader.readLine());

    }

    public static double readDouble() throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        return Double.parseDouble(reader.readLine());

    }

    public static boolean readBoolean() throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String s = reader.readLine();
        boolean name = true;

        if (s.equals("true"))
            name = true;
        else if (s.equals("false"))
            name = false;
        else {}

        return name;

    }
}

// Применял переменные, не компилилось на сервере, потом везде return сделал и прошло проверку.



*********


package com.javarush.test.level06.lesson08.task05;

/* Класс StringHelper
Cделать класс StringHelper, у которого будут 2 статических метода:
String multiply(String s, int count) – возвращает строку повторенную count раз.
String multiply(String s) – возвращает строку повторенную 5 раз.
Пример:
Амиго -> АмигоАмигоАмигоАмигоАмиго
*/

public class StringHelper
{
    public static String multiply(String s)
    {
        String result = "";
        //напишите тут ваш код
        result = s + s + s + s + s;
        return result;
    }

    public static String multiply(String s, int count)
    {
        String result = "";
        
        //напишите тут ваш код
        int i = 0;
        while (i<count)
        {
            result = result + s;
            i++;
        }
        return result;
    }
}


************


package com.javarush.test.level06.lesson11.home02;

import java.util.ArrayList;

/* Статические коты
1. В классе Cat добавь public статическую переменную cats (ArrayList<Cat>).
2. Пусть при каждом создании кота (нового объекта Cat) в переменную cats добавляется этот новый кот. Создать 10 объектов Cat.
3. Метод printCats должен выводить всех котов на экран. Нужно использовать переменную cats.
*/

public class Cat {

    public Cat() {

    }
    //напишите тут ваш код
    public static ArrayList<Cat> cats = new ArrayList<Cat>();

    public static void main(String[] args) {
        //Создай тут 10 котов
        Cat cat1 = new Cat();
        cats.add(cat1);
        Cat cat2 = new Cat();
        cats.add(cat2);
        Cat cat3 = new Cat();
        cats.add(cat3);
        Cat cat4 = new Cat();
        cats.add(cat4);
        Cat cat5 = new Cat();
        cats.add(cat5);
        Cat cat6 = new Cat();
        cats.add(cat6);
        Cat cat7 = new Cat();
        cats.add(cat7);
        Cat cat8 = new Cat();
        cats.add(cat8);
        Cat cat9 = new Cat();
        cats.add(cat9);
        Cat cat10 = new Cat();
        cats.add(cat10);

        printCats();
    }

    public static void printCats() {
        //Добавь свой код для пункта 3 тут
        String catname = "";
        for (int i = 0; i < Cat.cats.size(); i++) {
            System.out.println(Cat.cats.get(i));
        }

    }
}

// А я пытался сделать в конструкторе автоматическое добавление экзмпляра класса в массив. Но так и не смог придумать как. Зато ручное добавление экземпляров сработало 
  

***********


package com.javarush.test.level06.lesson11.home04;

/* Минимальное количество static-ов
Расставьте минимальное количество static-ов, чтобы код начал работать, и программа успешно завершилась
*/

public class Solution
{
    public static int step;

    public static void main(String[] args) {
        method1();
    }

    public static void method1() {
        method2();
    }


    public static void method2() {
        new Solution().method3();
    }

    public void method3() {
        method4();
    }

    public void method4() {
        step++;
        for (StackTraceElement element : Thread.currentThread().getStackTrace())
            System.out.println(element);
        if (step > 1) return;
        main(null);
    }
}

// Добавил static к методу1, методу2 и переменной step.


**************


package com.javarush.test.level06.lesson11.home05;

/* Есть новые идеи? Подумаем...
1. В классе Solution создать public статический класс Idea
2. В классе Idea создать метод public String getDescription(), который будет возвращать любой непустой текст
3. В классе Solution создайте статический метод public void printIdea(Idea idea), который будет выводить
на экран описание идеи - это то, что возвращает метод getDescription
*/

public class Solution
{
    public static void main(String[] args)
    {
        printIdea(new Idea());
    }

    //Добавьте тут класс Idea
    public static class Idea
    {
        public static String s;

        public Idea()
        {
           this.s = getDescription();
        }

        public String getDescription()
        {
           return "Hello World!";
        }
    }

    public static void printIdea(Idea idea)
    {
        System.out.println(Idea.s);
    }
}


**********


package com.javarush.test.level06.lesson11.home06;

/* KissMyShinyMetalAss
Создай класс с именем KissMyShinyMetalAss. Создай объект этого класса, выведи его на экран.
*/

public class Solution
{
    public static void main(String[] args)
    {
        System.out.println(new KissMyShinyMetalAss());
    }

    public static class KissMyShinyMetalAss
    {
        public KissMyShinyMetalAss()
        {

        }
    }
   
}


************


package com.javarush.test.level06.lesson11.home07;

import java.util.ArrayList;

/* Три статические переменных name
Создай 3 public статических переменных: String Solution.name, String Cat.name, String Dog.name
*/

public class Solution
{
    public static String name;

    public static class Cat {

        public static String name;
    }

    public static class Dog {

        public static String name;
    }

}


***********


package com.javarush.test.level06.lesson11.bonus01;

/* Нужно исправить программу, чтобы компилировалась и работала
Задача: Программа вводит два числа с клавиатуры и выводит их максимум в виде «Max is 25»
*/

import java.io.*;


public class Solution
{
    //public static int max = 100;
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader  = new BufferedReader(new InputStreamReader(System.in));

        String m = "Max is ";
        int a = Integer.parseInt(reader.readLine());
        int b = Integer.parseInt(reader.readLine());

        int max = a > b ? a : b;

        System.out.println(m + max);
    }

}

или такой вариант...

public class Solution
{
    public static int max = 100;
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader  = new BufferedReader(new InputStreamReader(System.in));

        String max = "Max is ";
        int a = Integer.parseInt(reader.readLine());
        int b = Integer.parseInt(reader.readLine());

        Solution.max = a > b ? a : b;

        System.out.println(max + Solution.max);
    }

}

// Закомментил первую строку с int max и изменил имя переменой String m (оно было тоже равно max).

// И второй вариант, здесь ничего не менял, просто изменил указание переменной int max на Solution.max - наверное этот вариант правильнее, но я сначала попробовал первый вариант и теперь проверка на сервере уже показывает, что задача решена


************


package com.javarush.test.level06.lesson11.bonus02;

import com.javarush.test.level05.lesson09.task02.Cat;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/* Нужно добавить в программу новую функциональность
Задача: У каждой кошки есть имя и кошка-мама. Создать класс, который бы описывал данную ситуацию. Создать два объекта: кошку-дочь и кошку-маму. Вывести их на экран.
Новая задача: У каждой кошки есть имя, кошка-папа и кошка-мама. Изменить класс Cat так, чтобы он мог описать данную ситуацию.
Создать 6 объектов: дедушку(папин папа), бабушку(мамина мама), папу, маму, сына, дочь.
Вывести их всех на экран в порядке: дедушка, бабушка, папа, мама, сын, дочь.

Пример ввода:
дедушка Вася
бабушка Мурка
папа Котофей
мама Василиса
сын Мурчик
дочь Пушинка

Пример вывода:
Cat name is дедушка Вася, no mother, no father
Cat name is бабушка Мурка, no mother, no father
Cat name is папа Котофей, no mother, father is дедушка Вася
Cat name is мама Василиса, mother is бабушка Мурка, no father
Cat name is сын Мурчик, mother is мама Василиса, father is папа Котофей
Cat name is дочь Пушинка, mother is мама Василиса, father is папа Котофей
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        String pFname = reader.readLine();
        Cat catParentF = new Cat(pFname);

        String pMname = reader.readLine();
        Cat catParentM = new Cat(pMname);

        String fathername = reader.readLine();
        Cat catFather = new Cat(fathername, catParentF, null);

        String momname = reader.readLine();
        Cat catMom = new Cat(momname, null, catParentM);

        String child1 = reader.readLine();
        Cat catChild1 = new Cat(child1, catFather, catMom);

        String child2 = reader.readLine();
        Cat catChild2 = new Cat(child2, catFather, catMom);


        System.out.println(catParentF);
        System.out.println(catParentM);
        System.out.println(catFather);
        System.out.println(catMom);
        System.out.println(catChild1);
        System.out.println(catChild2);

    }

    public static class Cat
    {

        String name;
        private Cat father;
        private Cat mom;

        Cat(String name)
        {
            this.name = name;
        }

        Cat(String name, Cat father, Cat mom)
        {
            this.name = name;
            this.father = father;
            this.mom = mom;
        }

        @Override
        public String toString()
        {
            if (father == null && mom == null)
                return "Cat name is " + name + ", no mother, no father";
            else if (father != null && mom == null)
                return "Cat name is " + name + ", no mother, father is " + father.name;
            else if (father == null && mom != null)
                return "Cat name is " + name + ", mother is " + mom.name + ", no father";
            else if (father != null && mom != null)
                return "Cat name is " + name + ", mother is " + mom.name + ", father is " + father.name;
            else
            {
                return null;
            }
        }
    }
}

// Сначала пытался создать объекты бабушка и дедушка, и только когда приступил к созданию объектов уже понял, что и бабушка и дедушка они же тоже папа и мама, так получилось всего три переменных и работающий код.


***********


package com.javarush.test.level06.lesson11.bonus03;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

/* Задача по алгоритмам
Задача: Написать программу, которая вводит с клавиатуры 5 чисел и выводит их в возрастающем порядке.
Пример ввода:
3
2
15
6
17
Пример вывода:
2
3
6
15
17
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader  = new BufferedReader(new InputStreamReader(System.in));

        //напишите тут ваш код
        String x = reader.readLine();
        String y = reader.readLine();
        String z = reader.readLine();
        String v = reader.readLine();
        String w = reader.readLine();

        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        int c = Integer.parseInt(z);
        int d = Integer.parseInt(v);
        int e = Integer.parseInt(w);



        min(a, b, c, d, e);

    }

        public static void min(int a1, int b1, int c1, int d1, int e1)
        {
            int[] minArray = {a1, b1, c1, d1, e1};
            Arrays.sort(minArray);

            System.out.println(minArray[0]);
            System.out.println(minArray[1]);
            System.out.println(minArray[2]);
            System.out.println(minArray[3]);
            System.out.println(minArray[4]);

        }
}



*************


package com.javarush.test.level07.lesson12.home06;

import java.io.IOException;
import java.lang.*;

/* Семья
Создай класс Human с полями имя(String), пол(boolean),возраст(int), отец(Human), мать(Human).
Создай объекты и заполни их так, чтобы получилось: Два дедушки, две бабушки, отец, мать, трое детей. Вывести объекты на экран.
Примечание:
Если написать свой метод String toString() в классе Human, то именно он будет использоваться при выводе объекта на экран.
Пример вывода:
Имя: Аня, пол: женский, возраст: 21, отец: Павел, мать: Катя
Имя: Катя, пол: женский, возраст: 55
Имя: Игорь, пол: мужской, возраст: 2, отец: Михаил, мать: Аня
…
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        //напишите тут ваш код
        Human parentF1 = new Human("Pol", true, 65, null, null);
        Human parentF2 = new Human("Bob", true, 75, null, null);
        Human parentM1 = new Human("Elsa", false, 61, null, null);
        Human parentM2 = new Human("Lisa", false, 60, null, null);

        Human father1 = new Human("Morgan", true, 45, parentF1, parentM1);
        Human mother1 = new Human("Marta", false, 40, parentF2, parentM2);

        Human child1 = new Human("Barbara", false, 15, father1, mother1);
        Human child2 = new Human("Lektor", true, 25, father1, mother1);
        Human child3 = new Human("Olga", false, 18, father1, mother1);

        System.out.println(parentF1);
        System.out.println(parentF2);
        System.out.println(parentM1);
        System.out.println(parentM2);
        System.out.println(father1);
        System.out.println(mother1);
        System.out.println(child1);
        System.out.println(child2);
        System.out.println(child3);

    }

    public static class Human
    {
        //напишите тут ваш код

        String name;
        boolean sex;
        int age;
        Human father;
        Human mother;

        Human(String name, boolean sex, int age, Human father, Human mother)
        {
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.father = father;
            this.mother = mother;
        }

        public String toString()
        {
            String text = "";
            text += "Имя: " + this.name;
            text += ", пол: " + (this.sex ? "мужской" : "женский");
            text += ", возраст: " + this.age;

            if (this.father != null)
                text += ", отец: " + this.father.name;

            if (this.mother != null)
                text += ", мать: " + this.mother.name;

            return text;
        }
    }

}



**********


Примеры:

Заполнение массива из 10 чисел, числами от 1 до 10:

public class MainClass
{
    public static void main(String[] args) 
    {
        int[] numbers = new int[10];

        for (int i = 0; i < numbers.length; i++)
        {
           numbers[i] = i + 1;
        }
    }
}



Заполнение массива из 10 чисел, числами от 10 до 1:

public class MainClass
{
    public static void main(String[] args) 
    {
        int[] numbers = new int[10];

        for (int i = 0; i < numbers.length; i++)
        {
           numbers[i] = 10 - i;
        }
    }
}



Заполнение массива из 10 чисел, числами от 0 до 9:

public class MainClass
{
    public static void main(String[] args) 
    {
        int[] numbers = new int[10];

        for (int i = 0; i < numbers.length; i++)
        {
           numbers[i] = i;
        }
    }
}



Заполнение массива из 10 чисел, числами от 9 до 0:

public class MainClass
{
    public static void main(String[] args) 
    {
        int[] numbers = new int[10];

        for (int i = 0; i < numbers.length; i++)
        {
           numbers[i] = 9 - i;
        }
    }
}


Ввод 10 строк с клавиатуры

public class MainClass
{
  public static void main(String[] args) throws IOException
  {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    String[] list = new String[10];

    for (int i = 0; i < list.length; i++)
    {
      list[i] = reader.readLine();
     }
  }
}



Ввод 10 чисел с клавиатуры

public class MainClass
{
  public static void main(String[] args) throws IOException
  {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    int[] list = new int[10];

    for (int i = 0; i < list.length; i++)
    {
      String s = reader.readLine();
      list[i] = Integer.parseInt(s);
    }
  }
}


Вывод массива на экран

public class MainClass
{
    public static void main(String[] args) throws IOException
    {
        int[] list = new int[10];

        //заполнение массива
        for (int i = 0; i < list.length; i++) 
           list[i] = i;

        //вывод на экран
        for (int i = 0; i < list.length; i++)  
          System.out.println(list[i]);
    }
}


Быстрая (статическая) инициализация. Сумма элементов массива:

public class MainClass
{
    public static void main(String[] args) throws IOException
    {
        //это статическая инициализация
        int[] list = {5, 6, 7, 8, 1, 2, 5, -7, -9, 2, 0};        
        
        //подсчёт суммы элементов
        int sum = 0;
        for (int i = 0; i < list.length; i++) 
           sum += list[i];

        System.out.println("Sum is " + sum);
    }
}


Поиск минимального элемента в массиве:

public class MainClass
{
    public static void main(String[] args) throws IOException
    {
        int[] list = {5, 6, 7, 8, 1, 2, 5, -7, -9, 2, 0};

        int min = list[0];
        for (int i = 1; i < list.length; i++)
        {
             if (list[i] < min) 
                  min = list[i];
        }

       System.out.println ("Min is " + min);
    }
}



***********


package com.javarush.test.level07.lesson04.task01;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.*;
import java.util.*;

/* Максимальное среди массива на 20 чисел
1. В методе initializeArray():
1.1. Создайте массив на 20 чисел
1.2. Считайте с консоли 20 чисел и заполните ими массив
2. Метод max(int[] array) должен находить максимальное число из элементов массива
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        int[] array = initializeArray();
        int max = max(array);
        System.out.println(max);
    }
    public static int[] initializeArray() throws IOException {
        //Инициализируйте (создайте и заполните) массив тут
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        int[] list = new int[20];

        for (int i = 0; i < list.length; i++)
        {
            String s = reader.readLine();
            list[i] = Integer.parseInt(s);
        }
        return list;
    }

    public static int max(int[] array) {
        //Найдите максимальное значение в этом методе
        int m = array[0];
        for (int i = 1; i < array.length; i++)
        {
            if (array[i] > m)
                m = array[i];
        }
        return m;
    }
}


**************


package com.javarush.test.level07.lesson04.task02;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/* Массив из строчек в обратном порядке
1. Создать массив на 10 строчек.
2. Ввести с клавиатуры 8 строчек и сохранить их в массив.
3. Вывести содержимое всего массива (10 элементов) на экран в обратном порядке. Каждый элемент - с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        String[] list = new String[10];

        //заполнение массива

        for (int i = 0; i < 8; i++)
        {
            list[i] = reader.readLine();
        }


        //вывод на экран
        for (int i = 10; i > 0;)
        {
                i--;
                System.out.println(list[i]);
        }

    }
}

// Очень много тупил, во втором цикле for неправильно условие написал вначале, сделал i == 0, потом вообще y < 0 - т.е. перепутал меньше и больше. Хотя, конечно, логичнее было бы поставить условие y != 0, т.е. пока y не равно 0 мы выполняем тело цикла, в общем теперь работает и так как есть и с условием y != 0. По первому циклу вопросов нет, отработал сразу с первого прохода.


*************


package com.javarush.test.level07.lesson04.task03;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/* 2 массива
1. Создать массив на 10 строк.
2. Создать массив на 10 чисел.
3. Ввести с клавиатуры 10 строк, заполнить ими массив строк.
4. В каждую ячейку массива чисел записать длину строки из массива строк, индекс/номер ячейки которой совпадает с текущим индексом из массива чисел.
Вывести содержимое массива чисел на экран, каждое значение выводить с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        String[] list = new String[10];
        int[] num = new int[10];

        // заполняем строковый массив
        for (int i = 0; i < list.length; i++)
        {
            list[i] = reader.readLine();
        }

        // теперь нужно заполнить массив из чисел
        for (int i = 0; i < list.length; i++)
        {
            num[i] = list[i].length();
        }

        // И теперь выводим массив чисел
        for (int i = 0; i < num.length; i++)
        {
            System.out.println(num[i]);
        }
    }
}


***********


package com.javarush.test.level07.lesson04.task04;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/* Массив из чисел в обратном порядке
1. Создать массив на 10 чисел.
2. Ввести с клавиатуры 10 чисел и записать их в массив.
3. Расположить элементы массива в обратном порядке.
4. Вывести результат на экран, каждое значение выводить с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        int[] num = new int[10];

        // Заполняем массив числами с клавиатуры
        for (int i = 0; i < num.length; i++)
        {
            num[i] = Integer.parseInt(reader.readLine());
        }

        // Теперь нужно перевернуть массив


        for (int i = 0; num.length/2 > i; i++) {
            int tmp = num[i];
            num[i] = num[num.length - i - 1];
            num[num.length - i - 1] = tmp;
        }

        //вывод на экран
        for (int i = 0; i < num.length; i++)
        {
            System.out.println(num[i]);
        }
    }
}


***********


package com.javarush.test.level05.lesson12.bonus03;

import java.io.*;

/* Задача по алгоритмам
Написать программу, которая:
1. вводит с консоли число N > 0
2. потом вводит N чисел с консоли
3. выводит на экран максимальное из введенных N чисел.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        //напишите тут ваш код
        String s = reader.readLine();
        int N = Integer.parseInt(s);
        int[] list = new int[N];

        for (int i = 0; i < N; i++)
        {
            String ss = reader.readLine();
            int nn = Integer.parseInt(ss);
            list[i] = nn;
        }

        int maximum = max(list);

        System.out.println(maximum);
    }

    public static int max(int[] array) {
        //Найдите максимальное значение в этом методе
        int m = array[0];
        for (int i = 1; i < array.length; i++)
        {
            if (array[i] > m)
                m = array[i];
        }
        return m;
    }
}


***********



Существует несколько способов провести копирование массива:


    используя метод System.arraycopy
    используя метод clone
    используя методы Arrays.copyOf или Arrays.copyOfRange
    провести копирование вручную в цикле


Рассмотрим их по порядку.

КОПИРОВАНИЕ С ИСПОЛЬЗОВАНИЕМ System.arraycopy

Массивы копируются с помощью метода System.arraycopy().
Сигнатура метода следующая:


public static void arraycopy(Object src,
                             int srcPos,
                             Object dest,
                             int destPos,
                             int length)


Данный метод, после всех проверок, копирует length элементов массива src, начиная с позиции srcPos, в массив dest, начиная с позиции destPos. Его удобно использовать, когда нужно скопировать лишь часть массива. Пример использования:


String[] a = {"abc", "def", "ghs"};
String[] b = new String[5];
System.arraycopy(a,0,b,0,a.length);
for (int i=0; i<b.length; i++)
  System.out.println(b[i]);


На печать будет выведено следующее:

abc
def
ghs
null
null



КОПИРОВАНИЕ С ИСПОЛЬЗОВАНИЕМ МЕТОДА clone

По умолчанию, все массивы являются объектами, т.е. поддерживают методы класса java.lang.Object.
Массивы также наследуют интерфейсы java.lang.Cloneable, java.io.Serializable. Для массивов переопределен метод clone(), который проводит поэлементное копирование. Пример использования:


String[] a = {"abc", "def", "ghs"};
String[] b = (String[])a.clone();
a[0] = "changed";
for (int i=0; i<b.length; i++)
  System.out.println(b[i]);


На печать будет выведено следующее:

abc
def
ghs



КОПИРОВАНИЕ С ИСПОЛЬЗОВАНИЕМ Arrays.copyOf

Сигнатура метода Arrays.copyOf для чисел типа int имеет следующий вид:


public static int[] copyOf(int[] original,
                           int newLength)


Производится копирование массива original, возвращается массив длиной newLength. Если original.length < newLength, то оставшаяся часть массива заполняется нулями. Пример использования:


int[] a = {1,2,3};
int[] b = Arrays.copyOf(a,5);
for (int i=0; i<b.length; i++)
  System.out.println(b[i]);


На печать будет выведено следующее:

1
2
3
0
0



КОПИРОВАНИЕ ВРУЧНУЮ в ЦИКЛЕ

Простенький пример:


int[] a = {1,2,3};
int[] b = new int[a.length];
for (int i=0; i<a.length; i++)
  b[i] = a[i];

package com.javarush.test.level07.lesson04.task05;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/* Один большой массив и два маленьких
1. Создать массив на 20 чисел.
2. Ввести в него значения с клавиатуры.
3. Создать два массива на 10 чисел каждый.
4. Скопировать большой массив в два маленьких: половину чисел в первый маленький, вторую половину во второй маленький.
5. Вывести второй маленький массив на экран, каждое значение выводить с новой строки.
*/


***********


public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        int[] bigNum = new int[20];

        // Заполняем массив числами с клавиатуры
        for (int i = 0; i < bigNum.length; i++)
        {
            bigNum[i] = Integer.parseInt(reader.readLine());
        }

        int[] num1 = new int[10];
        int[] num2 = new int[10];

        // Копируем массив в массивы
        System.arraycopy(bigNum, 0, num1, 0, 10);
        System.arraycopy(bigNum, 10, num2, 0, 10);

        //вывод на экран
        for (int i = 0; i < num2.length; i++)
        {
            System.out.println(num2[i]);
        }
    }
}  


*************


Array								ArrayList

Создание контейнера элементов

String[] list = new String[10]; 	ArrayList<String> list = new ArrayList<String>();


Получение количества элементов

int n = list.length; 				int n = list.size();


Взятие элемента из массива/коллекции

String s = list[3]; 				String s = list.get(3);


Запись элемента в массив

list[3] = s; 						list.set(3, s); 



Array												ArrayList

Добавление элемента в конец массива

Невозможно выполнить данное действие 				list.add(s);


Вставка элемента в середину массива

Невозможно выполнить данное действие 				list.add(15, s);


Вставка элемента в начало массива

Невозможно выполнить данное действие 				list.add(0, s);


Удаление элемента из массива

Можно стереть элемент с помощью list[3] = null. 	list.remove(3);
Но тогда останется «дыра» в массиве. 	



Для примера решим такую задачу «ввести 10 строк с клавиатуры и вывести их на экран в обратном порядке» .

Используем Array	

public static void main(String[] args)
{
Reader r = new InputStreamReader(System.in);
BufferedReader reader = new BufferedReader(r);

//ввод строк с клавиатуры
String[] list = new String[10];
for (int i = 0; i < list.length; i++)
{
  String s = reader.readLine();
  list[i] = s;
}

//вывод содержимого массива на экран
for (int i = 0; i < list.length; i++)
{
  int j = list.length - i - 1;
  System.out.println( list[j] );
}
}

	
Используем ArrayList

public static void main(String[] args)
{
Reader r = new InputStreamReader(System.in);
BufferedReader reader = new BufferedReader(r);

//ввод строк с клавиатуры
ArrayList<String> list = new ArrayList<String>();
for (int i = 0; i < 10; i++)
{
  String s = reader.readLine();
  list.add(s);
}

//вывод содержимого коллекции на экран 
for (int i = 0; i < list.size(); i++)
{
  int j = list.size() - i - 1;
  System.out.println( list.get(j) );
}
}



************


package com.javarush.test.level07.lesson06.task01;

import java.util.ArrayList;

/* 5 различных строчек в списке
1. Создай список строк.
2. Добавь в него 5 различных строчек.
3. Выведи его размер на экран.
4. Используя цикл выведи его содержимое на экран, каждое значение с новой строки.
*/
public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        ArrayList<String> list = new ArrayList<String>();

        // Заполняем список строками
        list.add("qwerty");
        list.add("qwert");
        list.add("qwer");
        list.add("qwe");
        list.add("qw");

        System.out.println(list.size());

        for (int i = 0; i < list.size(); i++)
        {
            System.out.println(list.get(i));
        }
    }
}


***********


package com.javarush.test.level07.lesson06.task02;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;


/* Самая длинная строка
1. Создай список строк.
2. Считай с клавиатуры 5 строк и добавь в список.
3. Используя цикл, найди самую длинную строку в списке.
4. Выведи найденную строку на экран.
5. Если таких строк несколько, выведи каждую с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<String> num = new ArrayList<String>();

        // заполняем строковый массив
        for (int i = 0; i < 5; i++)
        {
            String s = reader.readLine();
            num.add(s);
        }

        //вывод содержимого массива максимальных строк
        for (int i = 0; i < getS(num).size(); i++)
        {
            System.out.println(getS(num).get(i));
        }

    }
	
	// находим самую длинную строку
	
    static int getMax(ArrayList<String> num)
    {

        int max = 0;
        for (int i = 0; i < num.size(); i++)
        {
            if (max < num.get(i).length())
            {
                max = num.get(i).length();
            }

        }
        return max;
    }

	// метод вернет список самых длинных строк или одну строку, если она одна
	
    static ArrayList<String> getS(ArrayList<String> num)
    {
        ArrayList<String> str = new ArrayList<String>();
        int c = getMax(num);

        String s = "";
        for (int i = 0; i < num.size(); i++)
        {
            if (c == num.get(i).length())
            {
                str.add(num.get(i));
            }
        }
        return str;
    }

}


************


package com.javarush.test.level07.lesson06.task03;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Самая короткая строка
1. Создай список строк.
2. Считай с клавиатуры 5 строк и добавь в список.
3. Используя цикл, найди самую короткую строку в списке.
4. Выведи найденную строку на экран.
5. Если таких строк несколько, выведи каждую с новой строки.
*/
public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<String> num = new ArrayList<String>();

        // заполняем строковый массив
        for (int i = 0; i < 5; i++)
        {
            String s = reader.readLine();
            num.add(s);
        }

        //вывод содержимого массива максимальных строк
        for (int i = 0; i < getS(num).size(); i++)
        {
            System.out.println(getS(num).get(i));
        }

    }

    // находим самую короткую строку

    static int getMin(ArrayList<String> num)
    {
        int min = num.get(0).length();
        for (int i = 0; i < num.size(); i++)
        {
            if (min > num.get(i).length())
            {
                min = num.get(i).length();
            }

        }
        return min;
    }

    // метод вернет список самых длинных строк или одну строку, если она одна

    static ArrayList<String> getS(ArrayList<String> num)
    {
        ArrayList<String> str = new ArrayList<String>();

        int c = getMin(num);

        String s = "";
        for (int i = 0; i < num.size(); i++)
        {
            if (c == num.get(i).length())
            {
                str.add(num.get(i));
            }
        }
        return str;
    }
}


************


package com.javarush.test.level07.lesson06.task04;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* 10 строчек в начало списка
1. Создай список строк в методе main.
2. Добавь в него 10 строчек с клавиатуры, но только добавлять не в конец списка, а в начало.
3. Используя цикл выведи содержимое на экран, каждое значение с новой строки.
*/
public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<String> num = new ArrayList<String>();

        // заполняем строковый массив
        for (int i = 0; i < 10 ; i++)
        {
            String s = reader.readLine();
            num.add(0, s);
        }

        //вывод содержимого массива 
        for (int i = 0; i < num.size(); i++)
        {
            System.out.println(num.get(i));
        }

    }
}


**********


package com.javarush.test.level07.lesson06.task05;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Удали последнюю строку и вставь её в начало
1. Создай список строк.
2. Добавь в него 5 строчек с клавиатуры.
3. Удали последнюю строку и вставь её в начало. Повторить 13 раз.
4. Используя цикл выведи содержимое на экран, каждое значение с новой строки.
*/
public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<String> num = new ArrayList<String>();

        // заполняем строковый массив
        for (int i = 0; i < 5 ; i++)
        {
            String s = reader.readLine();
            num.add(s);
        }
		
		// Проводим перемешивание массива
        for (int i = 0; i < 13; i++)
        {
            num.add(0, num.get(num.size() - 1));
            num.remove(num.size() - 1);
        }

        // Важно!!! - вывод содержимого массива нужно делать ПОСЛЕ перемешивания!
        for (int i = 0; i < num.size(); i++)
        {
            System.out.println(num.get(i));
        }
    }
}


**********

Несколько полезных примеров работы с ArrayList и Generics:

Ввод списка целых чисел с клавиатуры

public static void main(String[] args) throws IOException
{
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in) );
    ArrayList<Integer> list = new ArrayList<Integer>();

    while (true)
    {
        String s = reader.readLine();
        if (s.isEmpty()) break;
        list.add(Integer.parseInt(s));
    }
}


То же, чётные числа добавляются в конец списка, нечётные – в начало.

public static void main(String[] args) throws IOException
{
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    ArrayList<Integer> list = new ArrayList<Integer>();

    while (true)
    {
        String s = reader.readLine();
        if (s.isEmpty()) break;

        int x = Integer.parseInt(s);
        if (x % 2 == 0)  //проверяем, что остаток от деления на два равен нулю
            list.add(x);          //добавление в конец
        else
            list.add(0, x);      //вставка в начало      
    }
}


Удаление всех чисел больше 5:

public static void main(String[] args) throws IOException
{
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in) );
    ArrayList<Integer> list = new ArrayList<Integer>();

    list.add(1);
    list.add(7);
    list.add(11);
    list.add(3);
    list.add(15);

    for (int i = 0; i < list.size(); )  //убрали увеличение i внутрь цикла
    {
        if (list.get(i) > 5)
            list.remove(i);  //не увеличиваем i, если удалили текущий  элемент  
        else
            i++;
    }
}


Разделение массива на два – чётных и нечётных чисел

public static void main(String[] args) throws IOException
{
    //статическая инициализация массива
    int[] data = {1, 5, 6, 11, 3, 15, 7, 8};  

    //создание списка, где все элементы должны быть типа Integer 
    ArrayList<Integer> list = new ArrayList<Integer>();   

    //заполнение списка из массива
    for (int i = 0; i < data.length; i++) list.add(data[i]);  

    ArrayList<Integer> even = new ArrayList<Integer>();  //чётные
    ArrayList<Integer> odd = new ArrayList<Integer>();    //нечётные

    for (int i = 0; i < list.size(); i++)
    {
        Integer x = list.get(i);
        if (x % 2 == 0)    //если x - чётное
            even.add(x);   // добавляем x в коллекцию четных чисел  
        else
            odd.add(x);    // добавляем x в коллекцию нечетных чисел
    }
}


Слияние списков.

public static void main(String[] args) throws IOException
{
    ArrayList<Integer> list1 = new ArrayList<Integer>();   //создание списка  
    Collections.addAll(list1, 1, 5, 6, 11, 3, 15, 7, 8);   //заполнение списка

    ArrayList<Integer> list2 = new ArrayList<Integer>();
    Collections.addAll(list2, 1, 8, 6, 21, 53, 5, 67, 18);

    ArrayList<Integer> result = new ArrayList<Integer>();

    result.addAll(list1);   //добавление всех значений из одного списка в другой
    result.addAll(list2);

    for (Integer x : result)   //быстрый for по всем элементам, только для коллекций
    {
        System.out.println(x);
    }
}


***********


package com.javarush.test.level07.lesson09.task01;


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

/* Три массива
1. Введи с клавиатуры 20 чисел, сохрани их в список и рассортируй по трём другим спискам:
Число делится на 3 (x%3==0), делится на 2 (x%2==0) и все остальные.
Числа, которые делятся на 3 и на 2 одновременно, например 6, попадают в оба списка.
2. Метод printList должен выводить на экран все элементы списка с новой строки.
3. Используя метод printList выведи эти три списка на экран. Сначала тот, который для x%3, потом тот, который для x%2, потом последний.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in) );
        ArrayList<Integer> list = new ArrayList<Integer>();

        for (int i = 0; i < 20 ; i++)
        {
            String s = reader.readLine();
            if (s.isEmpty()) break;
            list.add(Integer.parseInt(s));
        }


        ArrayList<Integer> even = new ArrayList<Integer>();  //делятся на 3
        ArrayList<Integer> odd = new ArrayList<Integer>();    //делятся на 2
        ArrayList<Integer> all = new ArrayList<Integer>();    //остальные

        for (int i = 0; i < list.size(); i++)
        {
            Integer x = list.get(i);
            if (x % 2 == 0 && x % 3 == 0)    //если x - чётное
            {
                odd.add(x);
                even.add(x);
            }
            else if (x % 2 == 0)
                odd.add(x);             // добавляем x в коллекцию четных чисел
            else if (x % 3 == 0)
                even.add(x);             // добавляем x в коллекцию чисел кратных 3
            else
                all.add(x);
        }

        printList(even);
        printList(odd);
        printList(all);

    }

    public static void printList(List<Integer> list)
    {
        //напишите тут ваш код
        for (int i = 0; i < list.size(); i++)
        {
            System.out.println(list.get(i));
        }
    }
}


************


package com.javarush.test.level07.lesson09.task02;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;

/* Слова в обратном порядке
Введи с клавиатуры 5 слов в список строк. Удали 3 - ий элемент списка, и выведи оставшиеся элементы в обратном порядке.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<String> list = new ArrayList<String>();

        // заполняем строковый массив
        for (int i = 0; i < 5 ; i++)
        {
            String s = reader.readLine();
            list.add(s);
        }

        list.remove(2);

        //вывод содержимого  на экран в обратном порядке
        for (int i = 0; i < list.size(); i++)
        {
            int j = list.size() - i - 1;
            System.out.println(list.get(j));
        }
    }
}


**********


package com.javarush.test.level07.lesson09.task03;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;

/* Слово «именно»
1. Создай список из слов «мама», «мыла», «раму».
2. После каждого слова вставь в список строку, содержащую слово «именно».
3. Используя цикл for вывести результат на экран, каждый элемент списка с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        ArrayList<String> list = new ArrayList<String>();

        list.add("мама");
        list.add("мыла");
        list.add("раму");

        for (int i = 0; i < 5; i++)
        {
            String s = "именно";
            list.add(i+1, s);
            i++;
        }

        for (int i = 0; i < list.size(); i++)
        {
            System.out.println(list.get(i));
        }
    }
}


*********


package com.javarush.test.level07.lesson09.task04;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Буква «р» и буква «л»
1. Создай список слов, заполни его самостоятельно.
2. Метод fix должен:
2.1. удалять из списка строк все слова, содержащие букву «р»
2.2. удваивать все слова содержащие букву «л».
2.3. если слово содержит и букву «р» и букву «л», то оставить это слово без изменений.
2.4. с другими словами ничего не делать.
Пример:
роза
лира
лоза
Выходные данные:
лира
лоза
лоза
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        ArrayList<String> list = new ArrayList<String>();
        list.add("роза"); //0
        list.add("лира"); //1
        list.add("лоза"); //2
        list = fix(list);

        for (String s : list)
        {
            System.out.println(s);
        }
    }

    public static ArrayList<String> fix(ArrayList<String> list)
    {
        //напишите тут ваш код

        for (int i = 0; i < list.size(); i++)
        {
            if (list.get(i).contains("р"))
            {
                if(list.get(i).contains("л"))
                    {}
                else
                {
                    list.remove(i);
                    i--;
                }
            }
            else if (list.get(i).contains("л"))
            {
                if (list.get(i).contains("р"))
                {}
                else
                {
                    list.add(i, list.get(i));
                    i++;
                }
            }
            else {}
        }
        return list;
    }
}

// Заметьте, мы изменяем i внутри if, т.к. при удалении элементов или добавлении, текущие индексы элементов изменятся.


**********


package com.javarush.test.level07.lesson09.task05;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Удвой слова
1. Введи с клавиатуры 10 слов в список строк.
2. Метод doubleValues должен удваивать слова по принципу a,b,c -> a,a,b,b,c,c.
3. Используя цикл for выведи результат на экран, каждое значение с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //Считать строки с консоли и объявить ArrayList list тут
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<String> list = new ArrayList<String>();

        // заполняем строковый массив
        for (int i = 0; i < 10 ; i++)
        {
            String s = reader.readLine();
            list.add(s);
        }


        ArrayList<String> result = doubleValues(list);

        //Вывести на экран result
        for (int i = 0; i < result.size(); i++)
        {
            System.out.println(result.get(i));
        }
    }

    public static ArrayList<String> doubleValues(ArrayList<String> list)
    {
        //напишите тут ваш код
        for (int i = 0; i < list.size(); i++)
        {
            list.add(i, list.get(i));
            i++;
        }

        return list;
    }
}


************


package com.javarush.test.level07.lesson12.home02;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Переставить M первых строк в конец списка
Ввести с клавиатуры 2 числа N  и M.
Ввести N строк и заполнить ими список.
Переставить M первых строк в конец списка.
Вывести список на экран, каждое значение с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String s1 = reader.readLine();
        String s2 = reader.readLine();
        int N = Integer.parseInt(s1);
        int M = Integer.parseInt(s2);


        //напишите тут ваш код
        ArrayList<String> list = new ArrayList<String>();

        for (int i = 0; i < N ; i++)
        {
            String s = reader.readLine();
            list.add(s);
        }

        for (int a = 0; a < M; a++)
        {
            list.add(list.get(0));
            list.remove(0);
        }

        for (String s : list)
        {
            System.out.println(s);
        }
    }
}


************


package com.javarush.test.level07.lesson12.home03;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

/* Максимальное и минимальное числа в массиве
Создать массив на 20 чисел. Заполнить его числами с клавиатуры. Найти максимальное и минимальное числа в массиве.
Вывести на экран максимальное и минимальное числа через пробел.
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<Integer> num = new ArrayList<Integer>();

        for (int i = 0; i < 20 ; i++)
        {
            String s = reader.readLine();
            if (s.isEmpty()) break;
            num.add(Integer.parseInt(s));
        }

        int  maximum = 0;
        int  minimum = 0;


        int m = num.get(0);
        for (int i = 1; i < num.size(); i++)
        {
            if (num.get(i) > m)
            m = num.get(i);
            maximum = m;
        }

        int n = num.get(0);
        for (int i = 1; i < num.size(); i++)
        {
            if (num.get(i) < n)
                n = num.get(i);
            minimum = n;
        }

        //напишите тут ваш код


        System.out.println(maximum);
        System.out.println(minimum);
    }
}


**********


package com.javarush.test.level07.lesson12.home04;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

/* Вводить с клавиатуры строки, пока пользователь не введёт строку 'end'
Создать список строк.
Ввести строки с клавиатуры и добавить их в список.
Вводить с клавиатуры строки, пока пользователь не введёт строку "end".  "end" не учитывать.
Вывести строки на экран, каждую с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        //напишите тут ваш код
        ArrayList<String> list = new ArrayList<String>();

        String s = "";


            while (!s.equals("end"))
        {
                s = reader.readLine();
                list.add(s);
        }

        list.remove(list.size() - 1);

        for (int i = 0; i < list.size(); i++)
        {
            System.out.println(list.get(i));
        }
    }
}


***********


package com.javarush.test.level07.lesson12.home05;

/* Бум
Написать программу, которая ведёт обратный отсчёт с 30 до 0, и в конце выводит на экран текст «Бум!».
Программа должна уменьшать число 10 раз в секунду. Для того чтобы вставить в программу задержку, воспользуйся функцией:
Thread.sleep(100); //задержка на одну десятую секунды.
Пример:
30
29
…
1
0
Бум!
*/

public class Solution
{
    public static void main(String[] args)
    {
        try
        {
            for (int i = 30; i >= 0; i--)
            {
                System.out.println(i);

                //напишите тут ваш код
                Thread.sleep(100);
            }
        } catch (InterruptedException e) {
        }

        System.out.println("Бум!");
    }
}

// Нужно было обернуть цикл в InterruptedException


*************


Вывод на экран элементов Set

public static void main(String[] args)
{
    Set<String> set = new HashSet<String>();
    set.add("Mama");
    set.add("Mila");
    set.add("Ramu");

    //получение итератора для множества
    Iterator<String> iterator = set.iterator();

    while (iterator.hasNext())        //проверка, есть ли ещё элементы   
    {
        //получение текущего элемента и переход на следующий
        String text = iterator.next();

        System.out.println(text);
    }
}


Вывод на экран элементов List

public static void main(String[] args)
{
    List<String> list = new ArrayList<String>();
    list.add("Mama");
    list.add("Mila");
    list.add("Ramu");

    Iterator<String> iterator = list.iterator();//получение итератора для списка

    while (iterator.hasNext())      //проверка, есть ли ещё элементы   
    {
        //получение текущего элемента и переход на следующий
        String text = iterator.next();

        System.out.println(text);
    }
}


Вывод на экран элементов Map

public static void main(String[] args)
{
    //все элементы хранятся в парах
    Map<String, String> map = new HashMap<String, String>();
    map.put("first", "Mama");
    map.put("second", "Mila");
    map.put("third", "Ramu");

    Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator();

    while (iterator.hasNext())
    {
        //получение «пары» элементов
        Map.Entry<String, String> pair = iterator.next();
        String key = pair.getKey();            //ключ
        String value = pair.getValue();        //значение
        System.out.println(key + ":" + value);
    }
}


Длинная запись	

public static void main(String[] args)
{
  Set<String> set = new HashSet<String>();
  set.add("Mama");
  set.add("Mila");
  set.add("Ramu");

  Iterator<String> iterator = set.iterator();
  while (iterator.hasNext())
  {
    String text = iterator.next();
    System.out.println(text);
  }
}

	
Сокращенная запись с итератором

public static void main(String[] args)
{
    Set<String> set = new HashSet<String>();
    set.add("Mama");
    set.add("Mila");
    set.add("Ramu");

    for (String text : set)   
    {
        System.out.println(text);
    }
}


Длинная запись	

Iterator<String> iterator = set.iterator();
while (iterator.hasNext())
{
    String text = iterator.next();


Сокращенная запись с итератором	

for (String text : set)
  

  
Вывод на экран элементов Set

public static void main(String[] args)
{
    Set<String> set = new HashSet<String>();
    set.add("Mama");
    set.add("Mila");
    set.add("Ramu");

    for (String text : set)   
    {
        System.out.println(text);
    }
}

Вывод на экран элементов List

public static void main(String[] args)
{
    List<String> list = new ArrayList<String>();
    list.add("Mama");
    list.add("Mila");
    list.add("Ramu");

    for (String text : list)        
    {
        System.out.println(text);
    }
}

Вывод на экран элементов Map

public static void main(String[] args)
{
    Map<String, String> map = new HashMap<String, String>(); 
    map.put("first", "Mama");
    map.put("second", "Mila");
    map.put("third", "Ramu");

    for (Map.Entry<String, String> pair : map.entrySet())
    {
        String key = pair.getKey();                      //ключ
        String value = pair.getValue();                  //значение
        System.out.println(key + ":" + value);
    }
}


***********


package com.javarush.test.level07.lesson12.bonus01;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Нужно исправить программу, чтобы компилировалась и работала
Задача:  Программа вводит с клавиатуры данные про котов и выводит их на экран. Пример:
Cat name is Barsik, age is 6, weight is 5, tail = 22
Cat name is Murka, age is 8, weight is 7, tail = 20
*/

public class Solution
{
    public final static ArrayList<Cat> CATS = new ArrayList<Cat>();

    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        while (true)
        {
            String name = reader.readLine();
            if (name.isEmpty()) break;
            String age = reader.readLine();
            if (age.isEmpty()) break;
            String weight = reader.readLine();
            if (weight.isEmpty()) break;
            String tail = reader.readLine();
            if (tail.isEmpty()) break;

            int iAge = Integer.parseInt(age);
            int iWeight = Integer.parseInt(weight);
            int iTail = Integer.parseInt(tail);

            Cat cat = new Cat(name,iAge,iWeight,iTail);
            CATS.add(cat);
        }

        printList();
    }

    public static void printList() {
        for (int i = 0; i < CATS.size(); i++)
        {
            System.out.println(CATS.get(i));
        }
    }

    public static class Cat
    {
        private String name;
        private int age;
        private int weight;
        private int tailLength;

        Cat(String name, int age, int weight, int tailLength)
        {
            this.name = name;
            this.age = age;
            this.weight = weight;
            this.tailLength = tailLength;
        }

        @Override
        public String toString()
        {
            return "Cat name is " + name + ", age is " + age + ", weight is " + weight + ", tail = " + tailLength;
        }
    }
}

// В этой программе я не сделал проверку всех вводимых значений, нужно было проверять каждый из четырех вводов.



************


package com.javarush.test.level05.lesson12.home05;


import java.io.*;

/* Вводить с клавиатуры числа и считать их сумму
Вводить с клавиатуры числа и считать их сумму, пока пользователь не введёт слово «сумма». Вывести на экран полученную сумму.
*/

public class Solution

{

    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        int sum = 0;

        while (true)
        {
            String name = reader.readLine();
            if (!name.equals("сумма"))
            {
                int n = Integer.parseInt(name);
                sum  += n;
            }
            else
                break;
        }

        System.out.println(sum);
    }
}

// У меня была ужасная ошибка, я писал код так " if (!name.equals("сумма")) break; ", путая проверку на равенство со строкой с проверкой на isEmpty (введено ли что-то), т.к. копировал этот if из примера где было isEmpty. Ужасная ошибка, конечно у меня ввод чисел даже не происходил, т.к. if сразу проверял не равна ли введенная строка - "сумма" и тут же благополучно завершался.



***********


package com.javarush.test.level07.lesson12.bonus02;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Нужно заменить функциональность программы
Задача:  Программа вводит строки, пока пользователь не введёт пустую строку (нажав enter).
Потом она конвертирует строки в верхний регистр (Мама превращается в МАМА) и выводит их на экран.
Новая задача: Программа вводит строки, пока пользователь не введёт пустую строку (нажав enter).
Потом программа строит новый список. Если в строке чётное число букв, строка удваивается, если нечётное – утраивается.
Программа выводит содержимое нового списка на экран.
Пример ввода:
Кот
Коты
Я
Пример вывода:
Кот Кот Кот
Коты Коты
Я Я Я
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        ArrayList<String> list = new ArrayList<String>();
        while (true)
        {
            String s = reader.readLine();
            if (s.isEmpty()) break;
            list.add(s);
        }

        ArrayList<String> newlist = new ArrayList<String>();

        for (int i = 0; i < list.size(); i++)
        {
            if (list.get(i).length() % 2 == 0)
                newlist.add(i, (list.get(i) + " " + list.get(i)));

            else
                newlist.add(i, (list.get(i) + " " + list.get(i) + " " + list.get(i)));

        }

        for (int i = 0; i < newlist.size(); i++)
        {
            System.out.println(newlist.get(i));
        }
    }
}
 


************


package com.javarush.test.level07.lesson12.bonus03;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;

/* Задача по алгоритмам
Задача: Написать программу, которая вводит с клавиатуры 20 чисел и выводит их в убывающем порядке.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int[] array = new int[20];

        for (int i = 0; i < 20; i++)
        {
            array[i] = Integer.parseInt(reader.readLine());
        }

        sort(array);

        /*for (int x : array)
        {
            System.out.println(x);
        }
        */
    }

    public static void sort(int[] array)
    {
        //напишите тут ваш код
        //сортировка стандартным методом
        Arrays.sort(array);
        // переносим значения в другой массив
        int[] array1 = array;
        //цикл для вывода в обратном порядке
        for (int i=array1.length-1;i>=0;i--){
            System.out.println(array1[i]);
        }
    }
}


**************


package com.javarush.test.level08.lesson03.task01;

import java.util.*;

/* HashSet из растений
Создать коллекцию HashSet с типом элементов String.
Добавить в неё 10 строк: арбуз, банан, вишня, груша, дыня, ежевика, жень-шень, земляника, ирис, картофель.
Вывести содержимое коллекции на экран, каждый элемент с новой строки.
Посмотреть, как изменился порядок добавленных элементов.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        Set<String> set = new HashSet<String>();
        set.add("арбуз");
        set.add("банан");
        set.add("вишня");
        set.add("груша");
        set.add("дыня");
        set.add("ежевика");
        set.add("жень-шень");
        set.add("земляника");
        set.add("ирис");
        set.add("картофель");

        for (String text : set)	// set - это имя коллекции
        {
            System.out.println(text);
        }
    }
}

вишня
арбуз
земляника
ирис
груша
банан
жень-шень
картофель
дыня
ежевика

Process finished with exit code 0



************


package com.javarush.test.level08.lesson03.task02;

import java.util.*;

/* HashMap из 10 пар
Создать коллекцию HashMap<String, String>, занести туда 10 пар строк:
арбуз - ягода, банан - трава, вишня - ягода, груша - фрукт, дыня - овощ, ежевика - куст, жень-шень - корень, земляника - ягода, ирис - цветок, картофель - клубень.
Вывести содержимое коллекции на экран, каждый элемент с новой строки.
Пример вывода (тут показана только одна строка):
картофель - клубень
*/

import java.util.HashMap;

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        Map<String, String> set = new HashMap<String, String>();
        set.put("арбуз", "ягода");
        set.put("банан", "трава");
        set.put("вишня", "ягода");
        set.put("груша", "фрукт");
        set.put("дыня", "овощ");
        set.put("ежевика", "куст");
        set.put("жень-шень", "корень");
        set.put("земляника", "ягода");
        set.put("ирис", "цветок");
        set.put("картофель", "клубень");

        for (Map.Entry<String, String> pair : set.entrySet())
        {
            String key = pair.getKey();
            String value = pair.getValue();
            System.out.println(key + " - " + value);
        }
    }
}


***********


package com.javarush.test.level08.lesson03.task03;

import java.util.HashMap;
import java.util.Map;

/* Коллекция HashMap из котов
Есть класс Cat с полем имя (name, String).
Создать коллекцию HashMap<String, Cat>.
Добавить в коллекцию 10 котов, в качестве ключа использовать имя кота.
Вывести результат на экран, каждый элемент с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        String[] cats = new String[] {"васька", "мурка", "дымка", "рыжик", "серый", "снежок", "босс", "борис", "визя", "гарфи"};

        HashMap<String, Cat> map = addCatsToMap(cats);

        for (Map.Entry<String, Cat> pair : map.entrySet())
        {
            System.out.println(pair.getKey() + " - " + pair.getValue());
        }
    }


    public static HashMap<String, Cat> addCatsToMap(String[] cats)
    {
        //напишите тут ваш код
        HashMap<String, Cat> set = new HashMap<String, Cat>();

        for (int i = 0; i < cats.length; i++)
        {
            set.put(cats[i], new Cat(cats[i]));
        }

        return set;

    }


    public static class Cat
    {
        String name;

        public Cat(String name)
        {
            this.name = name;
        }

        @Override
        public String toString()
        {
            return name != null ? name.toUpperCase() : null;
        }
    }
}


**************


package com.javarush.test.level08.lesson03.task04;

import java.util.HashMap;
import java.util.Map;

/* Вывести на экран список ключей
Есть коллекция HashMap<String, String>, туда занесли 10 различных строк. Вывести на экран список ключей, каждый элемент с новой строки.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("Sim", "Sim");
        map.put("Tom", "Tom");
        map.put("Arbus", "Arbus");
        map.put("Baby", "Baby");
        map.put("Cat", "Cat");
        map.put("Dog", "Dog");
        map.put("Eat", "Eat");
        map.put("Food", "Food");
        map.put("Gevey", "Gevey");
        map.put("Hugs", "Hugs");

        printKeys(map);
    }

    public static void printKeys(Map<String, String> map)
    {
        //напишите тут ваш код
        for (Map.Entry<String, String> pair : map.entrySet())
        {
            System.out.println(pair.getKey());
        }
    }
}


*****************


package com.javarush.test.level08.lesson03.task06;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/* Коллекция HashMap из Object
Есть коллекция HashMap<String, Object>, туда занесли 10 различных пар объектов.
Вывести содержимое коллекции на экран, каждый элемент с новой строки.
Пример вывода (тут показана только одна строка):
Sim - 5
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("Sim", 5);
        map.put("Tom", 5.5);
        map.put("Arbus", false);
        map.put("Baby", null);
        map.put("Cat", "Cat");
        map.put("Eat", new Long(56));
        map.put("Food", new Character('3'));
        map.put("Gevey", '6');
        map.put("Hugs", 111111111111L);
        map.put("Comp", (double)123);

        //напишите тут ваш код
        for (Map.Entry<String, Object> pair : map.entrySet())
        {
            System.out.println(pair.getKey() + " - " + pair.getValue());
        }

    }
}


*****************


Каждый объект типа Date хранит внутри себя время. А время хранится в очень интересном виде – количество миллисекунд, которые прошли с 1 января 1970 года, по Гринвичу.

Это число настолько большое, что не влезает в int, приходится хранить его в long. 



Получение текущей даты:

public static void main(String[] args) throws Exception
{
    Date today = new Date();
    System.out.println("Current date: " + today);
}


Вычисление разницы между двумя датами:

public static void main(String[] args) throws Exception
{
    Date currentTime = new Date();           //получаем текущую дату и время
    Thread.sleep(3000);                      //ждём 3 секунды – 3000 миллисекунд
    Date newTime = new Date();               //получаем новое текущее время
        
    long msDelay = newTime.getTime() - currentTime.getTime(); //вычисляем разницу
    System.out.println("Time distance is: " + msDelay + " in ms");
}


Наступило ли уже некоторое время:

public static void main(String[] args) throws Exception
{
    Date startTime = new Date();

    long endTime = startTime.getTime() + 5000;   //    +5 секунд
    Date endDate = new Date(endTime);

    Thread.sleep(3000);              // ждем 3 секунды 

    Date currentTime = new Date();
    if (currentTime.after(endDate))//проверяем что время currentTime после endDate
    {
        System.out.println("End time!");
    }
}


Сколько прошло времени с начала сегодняшнего дня:

public static void main(String[] args) throws Exception
{
    Date currentTime = new Date();
    int hours = currentTime.getHours();
    int mins = currentTime.getMinutes();
    int secs = currentTime.getSeconds();

    System.out.println("Time from midnight " + hours + ":" + mins + ":" + secs);
}


Сколько дней прошло с начала года:

public static void main(String[] args) throws Exception
{
    Date yearStartTime = new Date();
    yearStartTime.setHours(0);
    yearStartTime.setMinutes(0);
    yearStartTime.setSeconds(0);

    yearStartTime.setDate(1);      // первое число
    yearStartTime.setMonth(0);     // месяц январь, нумерация для месяцев 0-11

    Date currentTime = new Date();
    long msTimeDistance = currentTime.getTime() - yearStartTime.getTime();
    long msDay = 24 * 60 * 60 * 1000;  //сколько миллисекунд в одних сутках
        
    int dayCount = (int) (msTimeDistance/msDay); //количество целых дней
    System.out.println("Days from start of year: " + dayCount);
}



*************


package com.javarush.test.level08.lesson06.task01;

import java.util.*;

/* Создать два списка LinkedList и ArrayList
Нужно создать два списка – LinkedList и ArrayList.
*/

public class Solution
{
    public static Object createArrayList()
    {
        //напишите тут ваш код
        ArrayList<Object> list = new ArrayList<Object>();
        return list;

    }

    public static Object createLinkedList()
    {
        //напишите тут ваш код
        LinkedList<Object> link = new LinkedList<Object>();
        return link;

    }
}


**************


package com.javarush.test.level08.lesson06.task02;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/* Провести 10 тысяч вставок, удалений
Для arrayList и linkedList провести 10 тысяч вставок, удалений, а также вызовов get и set.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        // ArrayList
        ArrayList arrayList = new ArrayList();
        insert10000(arrayList);
        get10000(arrayList);
        set10000(arrayList);
        remove10000(arrayList);

        // LinkedList
        LinkedList linkedList = new LinkedList();
        insert10000(linkedList);
        get10000(linkedList);
        set10000(linkedList);
        remove10000(linkedList);
    }

    public static void insert10000(List list)
    {
        //напишите тут ваш код
        for (int i = 0; i < 10000; i++)
            list.add(i, i+1);
    }

    public static void get10000(List list)
    {
        //напишите тут ваш код
        for (int i = 0; i < list.size(); i++)
            list.get(i);
    }

    public static void set10000(List list)
    {
        //напишите тут ваш код
        for (int i = 0; i < list.size(); i++)
            list.set(i, i+1);
    }

    public static void remove10000(List list)
    {
        //напишите тут ваш код
        for (int i = 0; i < list.size(); i++)
        {
            list.remove(i);
            i--;
        }
    }
}

// При удалении нужно было подкорректировать индекс i. Хотя в лекциях рекомендуют использовать итератор:

Iterator<Integer> itr = list.iterator();
while(itr.hasNext()) {
   // do something
   itr.remove();
}



***************


package com.javarush.test.level08.lesson06.task03;

import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

/* Измерить сколько времени занимает 10 тысяч вставок для каждого списка
Измерить, сколько времени занимает 10 тысяч вставок для каждого списка.
Метод getTimeMsOfInsert  должен вернуть время его исполнения в миллисекундах.
*/

public class Solution
{
    public static void main(String[] args)
    {
        System.out.println(getTimeMsOfInsert(new ArrayList()));
        System.out.println(getTimeMsOfInsert(new LinkedList()));
    }

    public static long  getTimeMsOfInsert(List list)
    {
        //напишите тут ваш код
        Date currentDate = new Date();

        insert10000(list);

        //напишите тут ваш код
        Date newDate = new Date();
        long delay = newDate.getTime() - currentDate.getTime();

        return delay;
    }

    public static void insert10000(List list)
    {
        for (int i=0;i<10000;i++)
        {
            list.add(0, new Object());
        }
    }
}


**************


package com.javarush.test.level08.lesson06.task04;

import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

/* Измерить сколько времени занимает 10 тысяч вызовов get для каждого списка
Измерить, сколько времени занимает 10 тысяч вызовов get для каждого списка.
Метод getTimeMsOfGet  должен вернуть время его исполнения в миллисекундах.
*/

public class Solution
{
    public static void main(String[] args)
    {
        System.out.println(getTimeMsOfGet(fill(new ArrayList())));
        System.out.println(getTimeMsOfGet(fill(new LinkedList())));
    }

    private static List fill(List list)
    {
        for(int i = 0; i < 11; i++)
        {
            list.add(new Object());
        }
        return list;
    }

    public static long  getTimeMsOfGet(List list)
    {
        //напишите тут ваш код
        Date currentDate = new Date();

        get10000(list);

        //напишите тут ваш код
        Date newDate = new Date();
        long delay = newDate.getTime() - currentDate.getTime();

        return delay;

    }

    public static void get10000(List list)
    {
        if (list.isEmpty()) return;
        int x = list.size() / 2;

        for (int i = 0; i < 10000; i++)
        {
            list.get(x);
        }
    }
}


***************


package com.javarush.test.level08.lesson06.task05;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/* Четыре метода
Реализовать 4 метода. Они должны возвращать список, который лучше всего подходит для выполнения данных операций
(быстрее всего справится с большим количеством операций). Ничего измерять не нужно.
*/

public class Solution
{
    public static List  getListForGet()
    {
        //напишите тут ваш код
        return new ArrayList();
    }

    public static List  getListForSet()
    {
        //напишите тут ваш код
        return new ArrayList();

    }

    public static List  getListForAddOrInsert()
    {
        //напишите тут ваш код
        return new LinkedList();

    }

    public static List  getListForRemove()
    {
        //напишите тут ваш код
        return new LinkedList();
    }
}



***************


package com.javarush.test.level08.lesson08.task01;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/* 20 слов на букву «Л»
Создать множество строк (Set<String>), занести в него 20 слов на букву «Л».
*/

public class Solution
{
    public static HashSet<String> createSet()
    {
        //напишите тут ваш код
        HashSet<String> set = new HashSet<String>();
        set.add("лев1");
        set.add("лев2");
        set.add("лев3");
        set.add("лев4");
        set.add("лев5");
        set.add("лев6");
        set.add("лев7");
        set.add("лев8");
        set.add("лев9");
        set.add("лев10");
        set.add("лев11");
        set.add("лев12");
        set.add("лев13");
        set.add("лев14");
        set.add("лев15");
        set.add("лев16");
        set.add("лев17");
        set.add("лев18");
        set.add("лев19");
        set.add("лев20");

        return set;
    }
}


*************


package com.javarush.test.level08.lesson08.task02;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.lang.*;

/* Удалить все числа больше 10
Создать множество чисел(Set<Integer>), занести туда 20 различных чисел.
Удалить из множества все числа больше 10.
*/

public class Solution
{
    public static HashSet<Integer> createSet()
    {
        //напишите тут ваш код
        HashSet<Integer> set = new HashSet<Integer>();
        set.add(1);
        set.add(2);
        set.add(3);
        set.add(4);
        set.add(5);
        set.add(6);
        set.add(7);
        set.add(8);
        set.add(9);
        set.add(10);
        set.add(11);
        set.add(12);
        set.add(13);
        set.add(14);
        set.add(15);
        set.add(16);
        set.add(17);
        set.add(18);
        set.add(19);
        set.add(20);

        return set;
    }

    public static HashSet<Integer> removeAllNumbersMoreThan10(HashSet<Integer> set)
    {
        //напишите тут ваш код
        Iterator<Integer> it = set.iterator();
        while(it.hasNext())
        {
            Integer element = it.next();
            if (element > 10)
            {
                it.remove();
            }
        }
        return set;
    }
}


***************


package com.javarush.test.level08.lesson08.task03;

import sun.awt.SunHints;

import java.util.HashMap;
import java.util.HashSet;

/* Одинаковые имя и фамилия
Создать словарь (Map<String, String>) занести в него десять записей по принципу «Фамилия» - «Имя».
Проверить сколько людей имеют совпадающие с заданным имя или фамилию.
*/

public class Solution
{
    public static HashMap<String, String> createMap()
    {
        //напишите тут ваш код
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("Иванов", "Иван");
        map.put("Миронов", "Петр");
        map.put("Альбус", "Николай");
        map.put("Герберт", "Иван");
        map.put("Принс", "Петр");
        map.put("Петров", "Василий");
        map.put("Сидоров", "Иван");
        map.put("Буряк", "Петр");
        map.put("Милонов", "Николай");
        map.put("Буланов", "Федор");

        return map;

    }

    public static int getCountTheSameFirstName(HashMap<String, String> map, String name)
    {
        //напишите тут ваш код
        int count = 0;

        for (String value: map.values())
        {
            if (name.equals(value))
                count++;
        }

        return count;
    }

    public static int getCountTheSameLastName(HashMap<String, String> map, String lastName)
    {
        //напишите тут ваш код
        int count = 0;

        for (String key: map.keySet())
        {
            if (lastName.equals(key))
                count++;
        }

        return count;
    }
}

// Задача с подвохом - одинаковых фамилий быть не может, т.к. в этой коллекции НЕ МОЖЕТ быть ОДИНАКОВЫХ ключей, а ключи у нас как раз и есть фамилии.



***************


package com.javarush.test.level08.lesson08.task04;

import java.util.*;


/* Удалить всех людей, родившихся летом
Создать словарь (Map<String, Date>) и занести в него десять записей по принципу: «фамилия» - «дата рождения».
Удалить из словаря всех людей, родившихся летом.
*/

public class Solution
{
    public static HashMap<String, Date> createMap()
    {
        HashMap<String, Date> map = new HashMap<String, Date>();
        map.put("Stallone", new Date("JUNE 1 1980"));
        map.put("Shwarz", new Date("JULY 3 1981"));
        map.put("Smith", new Date("AUGUST 6 1981"));
        map.put("Barny", new Date("AUGUST 1 1981"));
        map.put("Polly", new Date("AUGUST 6 1985"));
        map.put("Molly", new Date("OCTOBER 5 1985"));
        map.put("Stivens", new Date("OCTOBER 17 1986"));
        map.put("Symon", new Date("OCTOBER 11 1987"));
        map.put("Tonny", new Date("OCTOBER 12 1982"));
        map.put("Bobby", new Date("OCTOBER 13 1982"));

        //напишите тут ваш код

        return map;

    }

    public static void removeAllSummerPeople(HashMap<String,Date> map)
    {
        //напишите тут ваш код
        Iterator<Map.Entry<String, Date>> iterator = map.entrySet().iterator();

        while(iterator.hasNext())
        {
            int temp = iterator.next().getValue().getMonth();
            if(temp == 5 || temp == 6 || temp == 7) 
            {
                iterator.remove();
            }
        }

    }
}


***************


 package com.javarush.test.level08.lesson08.task05;

import java.util.HashMap;
import java.util.Map;


/* Удалить людей, имеющих одинаковые имена
Создать словарь (Map<String, String>) занести в него десять записей по принципу «фамилия» - «имя».
Удалить людей, имеющих одинаковые имена.
*/

public class Solution
{
    public static HashMap<String, String> createMap()
    {
        //напишите тут ваш код
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("Stallone","Pit");
        map.put("Shwarz", "Polly");
        map.put("Smith", "Pop");
        map.put("Polly", "Pit");
        map.put("Molly", "Molly");
        map.put("Stivens","Troy");
        map.put("Symon", "Molly");
        map.put("Tonny", "Roy");
        map.put("Bobby", "Polly");
		map.put("Lobby", "Krit");
        return map;

    }

    public static void removeTheFirstNameDuplicates(HashMap<String, String> map)
    {
        //напишите тут ваш код
        HashMap<String, String> map1 = new HashMap<String, String>(map);
        HashMap<String, String> map2 = new HashMap<String, String>(map);

        for (Map.Entry<String, String> pair : map1.entrySet())
        {
            map2.remove(pair.getKey());
            if (map2.containsValue(pair.getValue()))
                removeItemFromMapByValue(map, pair.getValue());
        }

    }

    public static void removeItemFromMapByValue(HashMap<String, String> map, String value)
    {
        HashMap<String, String> copy = new HashMap<String, String>(map);
        for (Map.Entry<String, String> pair: copy.entrySet())
        {
            if (pair.getValue().equals(value))
                map.remove(pair.getKey());
        }
    }
}

// Во-первых решение нашел в инете, во-вторых - я догадывался, что нужно использовать второй метод, и в-третьих - я сделал коллекцию из 9 элементов, а надо было 10!!!!  Главное - внимательность!!!!



**************


package com.javarush.test.level08.lesson11.home01;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/* Set из котов
1. Внутри класса Solution создать public static класс кот – Cat.
2. Реализовать метод createCats, он должен создавать множество (Set) котов и добавлять в него 3 кота.
3. В методе main удалите одного кота из Set cats.
4. Реализовать метод printCats, он должен вывести на экран всех котов, которые остались во множестве. Каждый кот с новой строки.
*/

public class Solution
{
    public static void main(String[] args)
    {
        Set<Cat> cats = createCats();

        //напишите тут ваш код. пункт 3
        cats.remove(cats.iterator().next());

        printCats(cats);
    }

    public static Set<Cat> createCats()
    {
        //напишите тут ваш код. пункт 2
        Set<Cat> set = new HashSet<Cat>();

        set.add(new Cat());
        set.add(new Cat());
        set.add(new Cat());

        return set;
    }

    public static void printCats(Set<Cat> cats)
    {
        // пункт 4
        for (Cat text : cats)	// set - это имя коллекции
        {
            System.out.println(text);
        }
    }

    // пункт 1
    public static class Cat
    {

    }
}


****************


package com.javarush.test.level08.lesson11.home02;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.Iterator;

/* Множество всех животных
1. Внутри класса Solution создать public static классы Cat, Dog.
2. Реализовать метод createCats, котороый должен возвращать множество с 4 котами.
3. Реализовать метод createDogs, котороый должен возвращать множество с 3 собаками.
4. Реализовать метод join, котороый должен возвращать объединенное множество всех животных - всех котов и собак.
5. Реализовать метод removeCats, котороый должен удалять из множества pets всех котов, которые есть в множестве cats.
6. Реализовать метод printPets, котороый должен выводить на экран всех животных, которые в нем есть. Каждое животное с новой строки
*/

public class Solution
{
    public static void main(String[] args)
    {
        Set<Cat> cats = createCats();
        Set<Dog> dogs = createDogs();

        Set<Object> pets = join(cats, dogs);
        printPets(pets);

        removeCats(pets, cats);
        printPets(pets);
    }

    public static Set<Cat> createCats()
    {
        HashSet<Cat> result = new HashSet<Cat>();

        //напишите тут ваш код
        result.add(new Cat());
        result.add(new Cat());
        result.add(new Cat());
        result.add(new Cat());

        return result;
    }

    public static Set<Dog> createDogs()
    {
        //напишите тут ваш код
        HashSet<Dog> result = new HashSet<Dog>();

        result.add(new Dog());
        result.add(new Dog());
        result.add(new Dog());

        return result;
    }

    public static Set<Object> join(Set<Cat> cats, Set<Dog> dogs)
    {
        //напишите тут ваш код
        HashSet<Object> result = new HashSet<Object>();

        result.addAll(cats);
        result.addAll(dogs);

        return result;
    }

    public static void removeCats(Set<Object> pets, Set<Cat> cats)
    {
        //напишите тут ваш код
        pets.removeAll(cats);

    }

    public static void printPets(Set<Object> pets)
    {
        //напишите тут ваш код
        for (Object text : pets)	// set - это имя коллекции
        {
            System.out.println(text);
        }
    }

    //напишите тут ваш код

    public static class Cat
    {

    }

    public static class Dog
    {

    }
}


**************


package com.javarush.test.level08.lesson11.home03;

import java.util.HashMap;
import java.util.Map;

/* Люди с одинаковыми именами и/или фамилиями
1. Создать словарь Map (<String, String>) и добавить туда 10 человек в виде «Фамилия»-«Имя».
2. Пусть среди этих 10 человек есть люди с одинаковыми именами.
3. Пусть среди этих 10 человек есть люди с одинаковыми фамилиями.
4. Вывести содержимое Map на экран.
*/

public class Solution
{
    public static void main(String[] args)
    {
        Map<String, String> map = createPeopleList();
        printPeopleList(map);
    }

    public static Map<String, String> createPeopleList()
    {
        //напишите тут ваш код
        Map<String, String> map = new HashMap<String, String>();
        map.put("Stallone","Pit");
        map.put("Shwarz", "Polly");
        map.put("Smith", "Pop");
        map.put("Polly", "Pit");
        map.put("Molly", "Molly");
        map.put("Stivens","Troy");
        map.put("Symon", "Molly");
        map.put("Symon", "Roy");
        map.put("Bobby", "Polly");
        map.put("Lobby", "Krit");
        return map;
    }

    public static void printPeopleList(Map<String, String> map)
    {
        for (Map.Entry<String, String> s : map.entrySet())
        {
            System.out.println(s.getKey() + " " + s.getValue());
        }
    }

}

// Не знаю, что за задание, но в принципе ключей одинаковых быть не должно, но проверка проходит, странно...



************


package com.javarush.test.level08.lesson11.home04;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/* Минимальное из N чисел
1. Ввести с клавиатуры число N.
2. Считать N целых чисел и заполнить ими список - метод getIntegerList.
3. Найти минимальное число среди элементов списка - метод getMinimum.
*/

public class Solution
{


    public static void main(String[] args) throws Exception {



        List<Integer> integerList = getIntegerList();
        System.out.println(getMinimum(integerList));
    }

    public static int getMinimum(List<Integer> array) {
        // Найти минимум
        int m = array.get(0);
        for (int i = 1; i < array.size(); i++)
        {
            if (array.get(i) < m)
                m = array.get(i);
        }

        return m;
    }

    public static List<Integer> getIntegerList() throws IOException {
        //Тут создать и заполнить список
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        String s = reader.readLine();
        int N = Integer.parseInt(s);


       LinkedList<Integer> list = new LinkedList<Integer>();

        for (int i = 0; i < N; i++)
        {
            String ss = reader.readLine();
            int nn = Integer.parseInt(ss);
            list.add(nn);
        }

        return list;
    }
}



***************


package com.javarush.test.level08.lesson11.home05;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/* Мама Мыла Раму. Теперь с большой буквы
Написать программу, которая вводит с клавиатуры строку текста.
Программа заменяет в тексте первые буквы всех слов на заглавные.
Вывести результат на экран.

Пример ввода:
  мама     мыла раму.

Пример вывода:
  Мама     Мыла Раму.
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String s = reader.readLine();

        //напишите тут ваш код
        String[] part = s.split(" ");

        String str = "";

        for (int i = 0; i < part.length; i++)
        {
            str += upperword(part[i]) + " ";
        }

        System.out.print(str);

    }

    public static String upperword (String word)
    {
        if(word == null || word.isEmpty()) return "";//или return word;
        return word.substring(0, 1).toUpperCase() + word.substring(1);
    }

}



****************


package com.javarush.test.level08.lesson11.home06;

/* Вся семья в сборе
1. Создай класс Human с полями имя (String), пол (boolean), возраст (int), дети (ArrayList<Human>).
2. Создай объекты и заполни их так, чтобы получилось: два дедушки, две бабушки, отец, мать, трое детей.
3. Вывести все объекты Human на экран.
*/

import java.util.ArrayList;

public class Solution
{
    public static void main(String[] args)    {

        //напишите тут ваш код
        ArrayList<Human> children = new ArrayList<Human>();
        Human child1 = new Human("Barbara", false, 15, children);
        Human child2 = new Human("Lektor", true, 25, children);
        Human child3 = new Human("Olga", false, 18, children);

        ArrayList<Human> children1 = new ArrayList<Human>();
        children1.add(child1);
        children1.add(child2);
        children1.add(child3);

        Human father1 = new Human("Morgan", true, 45, children1);
        Human mother1 = new Human("Marta", false, 40, children1);

        ArrayList<Human> children2 = new ArrayList<Human>();
        children2.add(father1);

        ArrayList<Human> children3 = new ArrayList<Human>();
        children3.add(mother1);

        Human parentF1 = new Human("Pol", true, 65, children2);
        Human parentF2 = new Human("Bob", true, 75, children3);
        Human parentM1 = new Human("Elsa", false, 61, children2);
        Human parentM2 = new Human("Lisa", false, 60, children3);


        System.out.println(parentF1);
        System.out.println(parentF2);
        System.out.println(parentM1);
        System.out.println(parentM2);
        System.out.println(father1);
        System.out.println(mother1);
        System.out.println(child1);
        System.out.println(child2);
        System.out.println(child3);

    }

    public static class Human
    {
        //напишите тут ваш код
        String name;
        boolean sex;
        int age;
        ArrayList<Human> children;

        Human(String name, boolean sex, int age, ArrayList<Human> children)
        {
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.children = children;
        }

        public String toString()
        {
            String text = "";
            text += "Имя: " + this.name;
            text += ", пол: " + (this.sex ? "мужской" : "женский");
            text += ", возраст: " + this.age;

            int childCount = this.children.size();
            if (childCount > 0)
            {
                text += ", дети: "+this.children.get(0).name;

                for (int i = 1; i < childCount; i++)
                {
                    Human child = this.children.get(i);
                    text += ", "+child.name;
                }
            }

            return text;
        }
    }

}


******************


// Это совет по решению задачи - Четыре static'а должно быть. Всё просто, главное помнить: статические методы и переменные не могут пользоваться нестатическими методами/переменными, а вот нестатические статическими — могут. 


package com.javarush.test.level08.lesson11.home07;

/* Переставь один модификатор static
Переставь один модификатор static, чтобы пример скомпилировался.
*/


// Вот так было:

public class Solution
{
    public int A = 5;
    public static int B = 2;

    public int C = A*B;
    public static int D = B*A;

    public static void main(String[] args)
    {
    }

    public static int getValue()
    {
        return D;
    }

    public int getValue2()
    {
        return C;
    }
}


// Вот такой правильный ответ: 

public class Solution
{
    public static int A = 5;
    public static int B = 2;

    public int C = A*B;
    public static int D = B*A;

    public static void main(String[] args)
    {
    }

    public int getValue()
    {
        return D;
    }

    public int getValue2()
    {
        return C;
    }
}



*************



package com.javarush.test.level08.lesson11.home08;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

/* Пять наибольших чисел
Создать массив на 20 чисел. Заполнить его числами с клавиатуры. Вывести пять наибольших чисел.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int[] array = new int[20];
        for (int i = 0; i < array.length; i++)
        {
            array[i] = Integer.parseInt(reader.readLine());
        }

        sort(array);

        System.out.println(array[0]);
        System.out.println(array[1]);
        System.out.println(array[2]);
        System.out.println(array[3]);
        System.out.println(array[4]);
    }

    public static void sort(int[] array)
    {
        //напишите тут ваш код
        Arrays.sort(array);
		
		// переворачиваем массив, чтобы вывод индексов был по условию
		
        for (int i = 0; array.length/2 > i; i++)
        {
            int tmp = array[i];
            array[i] = array[array.length - i - 1];
            array[array.length - i - 1] = tmp;
        }

    }
}



***************



package com.javarush.test.level08.lesson11.home09;

import java.util.Date;

/* Работа с датой
1. Реализовать метод isDateOdd(String date) так, чтобы он возвращал true, если количество дней с начала года - нечетное число, иначе false
2. String date передается в формате MAY 1 2013
Не забудьте учесть первый день года.
Пример:
JANUARY 1 2000 = true
JANUARY 2 2020 = false
*/

public class Solution
{
    public static void main(String[] args)
    {
    }

    public static boolean isDateOdd(String date)
    {
        Date currentTime = new Date(date);
        Date yearStartTime = new Date(currentTime.getYear(),0,1,0,0,0);
        long msDay = 24*60*60*1000;
        long msDistance = currentTime.getTime() - yearStartTime.getTime();
        long days = msDistance/msDay + 1;
        return days % 2 == 0 ? false : true;

    }
}



*********************



package com.javarush.test.level09.lesson02.task01;

/* Каждый метод должен возвращать свой StackTrace
Написать пять методов, которые вызывают друг друга. Каждый метод должен возвращать свой StackTrace.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        method1();
    }

    public static StackTraceElement[] method1()
    {
        method2();
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements;


    }

    public static StackTraceElement[] method2()
    {
        method3();
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements;

    }

    public static StackTraceElement[] method3()
    {
        method4();
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements;

    }

    public static StackTraceElement[] method4()
    {
        method5();
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements;

    }

    public static StackTraceElement[] method5()
    {
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements;

    }
}



***************



 Смотрите: [0] - это сам getStackTrace [1] - это текущий метод, в котором мы находимся и запустили getStackTrace [2] - это метод, на уровень ниже - то есть тот, который вызвал текущий [3]- соответственно метод, который вызвал метод, который вызвал текущий метод... и так далее, дойдем и до main.
 
 
 package com.javarush.test.level09.lesson02.task02;

/* И снова StackTrace
Написать пять методов, которые вызывают друг друга. Каждый метод должен возвращать имя метода, вызвавшего его, полученное с помощью StackTrace.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        method1();
    }

    public static String method1()
    {
        method2();
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getMethodName();

    }

    public static String method2()
    {
        method3();
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getMethodName();

    }

    public static String method3()
    {
        method4();
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getMethodName();

    }

    public static String method4()
    {
        method5();
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getMethodName();

    }

    public static String method5()
    {
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getMethodName();
    }
}



******************


package com.javarush.test.level09.lesson02.task03;

/* Метод должен вернуть номер строки кода, из которого вызвали этот метод
Написать пять методов, которые вызывают друг друга. Метод должен вернуть номер строки кода, из которого вызвали этот метод. Воспользуйся функцией: element.getLineNumber().
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        method1();
    }

    public static int method1()
    {
        method2();
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getLineNumber();
    }

    public static int method2()
    {
        method3();
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getLineNumber();
    }

    public static int method3()
    {
        method4();
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getLineNumber();
    }

    public static int method4()
    {
        method5();
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getLineNumber();
    }

    public static int method5()
    {
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        return stackTraceElements[2].getLineNumber();
    }
}



******************



package com.javarush.test.level09.lesson02.task04;

/* Стек-трейс длиной 10 вызовов
Напиши код, чтобы получить стек-трейс длиной 10 вызовов.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        method1();
    }

    public static StackTraceElement[] method1()
    {
        return method2();
    }

    public static StackTraceElement[] method2()
    {
        //напишите тут ваш код
        return method3();

    }

    public static StackTraceElement[] method3()
    {
        //напишите тут ваш код
        return method4();

    }

    public static StackTraceElement[] method4()
    {
        //напишите тут ваш код
        return method5();

    }

    public static StackTraceElement[] method5()
    {
        //напишите тут ваш код
        return method6();

    }

    public static StackTraceElement[] method6()
    {
        //напишите тут ваш код
        return method7();

    }

    public static StackTraceElement[] method7()
    {
        //напишите тут ваш код
        return method8();

    }

    public static StackTraceElement[] method8()
    {
        //напишите тут ваш код
        return method9();

    }

    public static StackTraceElement[] method9()
    {
        return method10();
    }

    public static StackTraceElement[] method10()
    {
        return Thread.currentThread().getStackTrace();
    }
}

// Просто везде дописал return в вызовах методов.



*******************


package com.javarush.test.level09.lesson02.task05;

/* Метод должен возвращать результат – глубину его стек-трейса
Написать метод, который возвращает результат – глубину его стек трейса – количество методов в нем (количество элементов в списке). Это же число метод должен выводить на экран.
*/

public class Solution
{
    public static int getStackTraceDeep()
    {
        //напишите тут ваш код
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();

        int trace = stackTraceElements.length;

        System.out.println(trace);

        return trace;
    }
}



*****************



Вот пример программы, которая перехватывает исключение – деление на 0. И продолжает работать.

public class ExceptionExample2
{
    public static void main(String[] args)
    {
        System.out.println("Program starts");

        try
        {
            System.out.println("Before method1 calling");
            method1();
            System.out.println("After method1 calling. Never will be shown");
        }
        catch (Exception e)
        {
           System.out.println("Exception has been caught");
        }

        System.out.println("Program is still running");
    }

    public static void method1()
    {
        int a = 100;
        int b = 0;
        System.out.println(a / b);
    }
}


Вот что будет выведено на экран:

"Program starts"
"Before method1 calling"
"Exception has been caught"
"Program is still running"
 
 
- Если внутри блока try возникает исключение то, оно захватывается в блоке catch. Остаток кода в блоке try, не будет исполнен, а сразу начнётся исполнение блока catch.
- Если исключение не возникло, то блок try исполняется до конца, а catch никогда так и не начнёт исполняться.

- Все исключения – это классы, унаследованные от класса Exception. Мы можем перехватить любое из них, указав в блоке catch его класс, или все сразу, указав общий родительский класс - Exception. Затем из переменной e (эта переменная хранит ссылку на объект исключения), можно получить всю необходимую информацию о возникшей ошибке. 

- Блок try может содержать несколько блоков catch, каждый из которых будет захватывать исключения своего типа.

Пример:

public class ExceptionExample2
{
    public static void main(String[] args)
    {
        System.out.println("Program starts");

        try
        {
            System.out.println("Before method1 calling");
            method1();
            System.out.println("After method1 calling. Never will be shown ");
        }
        catch (NullPointerException e)
        {
           System.out.println("Reference is null. Exception has been caught");
        }
        catch (ArithmeticException e)
        {
            System.out.println("Division by zero. Exception has been caught");
        }
        catch (Exception e)
        {
            System.out.println("Any other errors. Exception has been caught");
        }

        System.out.println("Program is still running");
    }

    public static void method1()
    {
        int a = 100;
        int b = 0;
        System.out.println(a / b);
    }
}



Примеры проверяемых (checked) исключений

public static void main(String[] args)
{
    method1();
}

public static void method1() throws  FileNotFoundException, ClassNotFoundException
{
    //тут кинется исключение  FileNotFoundException, такого файла нет
    FileInputStream fis = new FileInputStream("C2:\\badFileName.txt");
}

- Этот пример не скомпилируется, т.к. метод main вызывает метод method1(), который выкидывает исключения, обязательные к перехвату.

- Чтобы пример скомпилировался, надо добавить обработку исключений в метод main. Сделать это можно двумя способами:


Способ 1: просто пробрасываем исключение выше (вызывающему):

public static void main(String[] args)  throws FileNotFoundException, ClassNotFoundException 
{
    method1();
}

public static void method1() throws FileNotFoundException, ClassNotFoundException
{
    //тут кинется исключение  FileNotFoundException, такого файла нет
    FileInputStream fis = new FileInputStream("C2:\\badFileName.txt");
}


- А тут перехватываем его с помощью try-catch:

Способ 2: перехватываем исключение:

public static void main(String[] args)
{
    try
    {
        method1();
    }
    catch(Exception e)
    {
    }
}

public static void method1() throws FileNotFoundException, ClassNotFoundException
{
    //тут кинется исключение  FileNotFoundException, такого файла нет
    FileInputStream fis = new FileInputStream("C2:\\badFileName.txt");
}



Не обрабатываем исключения – нужно пробросить их дальше, тому, кто знает как

public static void method2() throws FileNotFoundException, ClassNotFoundException
{
    method1();
}


Обрабатываем одно исключение, второе – пробрасываем:

public static void method3() throws ClassNotFoundException
{
    try
    {
        method1();
    }
    catch (FileNotFoundException e)
    {
        System.out.println("FileNotFoundException has been caught.");
    }
}


Перехватываем оба – ничего не пробрасываем:

public static void method4()
{
    try
    {
        method1();
    }
    catch (FileNotFoundException e)
    {
        System.out.println("FileNotFoundException has been caught.");
    }
    catch (ClassNotFoundException e)
    {
        System.out.println("ClassNotFoundException has been caught.");
    }
}


- Но есть вид исключений – это RuntimeException и классы, унаследованные от него. Их перехватывать не обязательно. Это unchecked исключения. Считается, что это трудно прогнозируемые исключения и предсказать их появление практически невозможно. С ними можно делать все то же самое, но указывать в throws их не нужно.



Код с использованием исключений 	

class ExceptionExampleOriginal
{
    public static void main(String[] args)
    {
        System.out.println("main begin");
        try
        {
            System.out.println("main before call");			
            method1();
            System.out.println("main after call");
        }		
        catch (RuntimeException e)
		{
            String s = e.getMessage();
            System.out.println(s);
        }
        System.out.println("main end");
    }

    public static void method1()
    {	
        System.out.println("method1 begin");		
        method2();
        System.out.println("method1 end");
    }

    public static void method2()
    {
      System.out.println("method2");
      String s = "Message: Unknown Exception";
      throw new RuntimeException(s);

    }
}


Примерная расшифровка

public class ExceptionExample
{
    private static Exception exception = null;

    public static void main(String[] args)
    {
        System.out.println("main begin");

       
        System.out.println("main before call");

        method1();

        if (exception == null)
        {
            System.out.println("main after call");
        }
        else if (exception instanceof RuntimeException)
        {
            RuntimeException e = (RuntimeException) exception;
            exception = null;
            String s = e.getMessage();
            System.out.println(s);
        }
        System.out.println("main end");
    }

    public static void method1()
    {
        System.out.println("method1 begin");
        method2();
        if (exception != null) return;
        System.out.println("method1 end");
    }

    public static void method2()
    {
        System.out.println("method2");
        String s = "Message: Unknown Exception";
        exception = new RuntimeException(s);
        return;
    }
}



- В примере слева (первый пример) мы по цепочке вызываем несколько методов. В method2 мы специально создаем и выкидываем исключение (инициируем ошибку).

- В примере справа (второй пример) показано, что примерно при этом происходит.

- Посмотри на method2. Создание исключение превратилось вот во что: создали объект типа RuntimeException, сохранили его в специальную переменную exception и тут же вышли из метода – return.

- В методе method1, после вызова method2 стоит проверка – есть исключение или нет, если исключение есть, тогда метод method1 тут же завершается. Такая проверка неявно производится после вызова каждого(!) метода в Java.

- Ого!

- Вот тебе и ого.

- В колонке справа в методе main я написал, что примерно происходит при перехвате исключения с помощью конструкции try-catch. Если исключения не было, то все продолжает работать, как и запланировано. Если исключение было, и оно было такого типа, как указано в catch, тогда мы его обрабатываем.

- А что значит throw и instanceof?

– Посмотри на последнюю строку throw new RuntimeException(s). Таким способом мы создаем и кидаем исключение. Пока мы так делать не будем. Это только для примера.

- А с помощью команды «а instanceof B» мы проверяем, имеет ли объект a тип B. Т.е. имеет ли объект, который хранится в переменной exception, тип RuntimeException. Это логическое условие.



*************



package com.javarush.test.level09.lesson06.task01;

/* Исключение при работе с числами
Перехватить исключение (и вывести его на экран), указав его тип, возникающее при выполнении кода:
int a = 42 / 0;
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        try
        {
            int a = 42/0;
        }
        catch (Exception e)
        {
            System.out.println(e);
        }

        //напишите тут ваш код
		// А вот здесь ничего не пришлось писать, чтобы пройти проверку, 
		// зачем здесь написано про код, непонятно		
    }
}


*****************


package com.javarush.test.level09.lesson06.task02;

/* Исключение при работе со строками
Перехватить исключение (и вывести его на экран), указав его тип, возникающее при выполнении кода:
String s = null;
String m = s.toLowerCase();
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        try
        {
            String s = null;
            String m = s.toLowerCase();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
        //напишите тут ваш код
    }
}

// Снова прошел проверку без второго блока кода. А в задании указано два ввода блока кода.



*****************


package com.javarush.test.level09.lesson06.task05;

import java.util.HashMap;

/* Исключение при работе с коллекциями Map
Перехватить исключение (и вывести его на экран), указав его тип, возникающее при выполнении кода:
HashMap<String, String> map = new HashMap<String, String>(null);
map.put(null, null);
map.remove(null);
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        try
        {
            HashMap<String, String> map = new HashMap<String, String>(null);
            map.put(null, null);
            map.remove(null);
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
        //напишите тут ваш код
    }
}

// Только последнее задание распечатал, все они были однотипные, просто вставлял в блок код, который вызывает ошибку.



******************



- Хочу рассказать тебе, как работает множественный catch. Все очень просто: при возникновении исключения в блоке try, выполнение программы передаётся на первый catch.

- Если тип, указанный внутри круглых скобок блока catch, совпадает с типом объекта-исключения, то начинается выполнение кода внутри блока {}. Иначе переходим к следующему catch. Там проверка повторяется.

- Если блоки catch закончились, а исключение так и не было перехвачено, то оно выбрасывается дальше, а текущий метод аварийно завершается. 


- Т.к. все исключения унаследованы от классов Exception или RuntimeException (который тоже унаследован от Exception), то их все можно перехватить командами catch (Exception e) или catch (RuntimeException e).

- Отсюда два вывода. Во-первых, с помощью команды catch(Exception e) можно перехватить любое исключение вообще. Во-вторых - порядок блоков catch имеет значение.


Примеры:

- Возникший при делении на 0 ArithmeticException будет перехвачен во втором catch.
Код

try
{
    System.out.println("Before method1 calling.");
    int a = 1 / 0;
    System.out.println("After method1 calling. Never will be shown.");
}
catch (NullPointerException e)
{
    System.out.println("Reference is null. Exception has been caught.");
}
catch (ArithmeticException e)
{
    System.out.println("Division by zero. Exception has been caught.");
}
catch (Exception e)
{
    System.out.println("Any other errors. Exception has been caught.");
}



- В примере ниже возникший ArithmeticException будет перехвачен в первом catch, т.к. классы всех исключений унаследованы от Exception. Т.е. Exception захватывает любое исключение.

try
{
    System.out.println("Before method1 calling.");
    int a = 1/0;
    System.out.println("After method1 calling. Never will be shown.");
}
catch (Exception e)
{
    System.out.println("Any other errors. Exception has been caught.");
}
catch (NullPointerException e)
{
    System.out.println("Reference is null. Exception has been caught.");
}
catch (ArithmeticException e)
{
    System.out.println("Divided by zero. Exception has been caught.");
}



- В примере ниже исключение ArithmeticException не будет перехвачено, а будет выброшено дальше в вызывающий метод.

try
{
    System.out.println("Before method1 calling.");
    int a = 1/0;
    System.out.println("After method1 calling. Never will be shown.");
}
catch (NullPointerException e)
{
    System.out.println("Reference is null. Exception has been caught.");
}


*******************



package com.javarush.test.level09.lesson08.task01;

import java.io.FileNotFoundException;
import java.net.URISyntaxException;
import java.util.HashMap;

/* Исключения
Есть метод, который выбрасывает два исключения, унаследованные от Exception, и два унаследованных от RuntimeException:
NullPointerException, ArithmeticException, FileNotFoundException, URISyntaxException.

Нужно перехватить NullPointerException и FileNotFoundException, но не перехватывать
ArithmeticException и URISyntaxException. Как это сделать?
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        try
        {
            method1();
        }

        //напишите тут ваш код
        catch (NullPointerException e)
        {}
        catch (FileNotFoundException e)
        {}
    }

    public static void method1() throws NullPointerException, ArithmeticException, FileNotFoundException, URISyntaxException
    {
        int i = (int) (Math.random() * 4);
        if (i == 0)
            throw new NullPointerException();
        if (i == 1)
            throw new ArithmeticException();
        if (i == 2)
            throw new FileNotFoundException();
        if (i == 3)
            throw new URISyntaxException("", "");
    }
}


******************


package com.javarush.test.level09.lesson08.task02;

import java.io.*;

/* Перехватывание исключений
1. Есть три исключения последовательно унаследованные от Exception:
2. class Exception1 extends  Exception
3. class Exception2 extends  Exception1
4. class Exception3 extends  Exception2
5. Есть метод, который описан так:
5.1. public static void method1() throws Exception1, Exception2, Exception3

6. Напиши catch, который перехватит все три Exception1, Exception2 и Exception3
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
      //напишите тут ваш код
        try
        {
            method1();
        }
      //напишите тут ваш код
        catch (Exception1 e) {}
    }

    public static void method1() throws Exception1, Exception2, Exception3
    {
        int i = (int) (Math.random() * 3);
        if (i == 0)
            throw new Exception1();
        if (i == 1)
            throw new Exception2();
        if (i == 2)
            throw new Exception3();
    }
}

class Exception1 extends Exception {
}

class Exception2 extends Exception1 {
}

class Exception3 extends Exception2 {
}



*******************



package com.javarush.test.level09.lesson08.task03;

import java.io.CharConversionException;
import java.io.IOException;
import java.nio.file.FileSystemException;

/* Перехват выборочных исключений
1. Разберись, какие исключения бросает метод BEAN.methodThrowExceptions.
2. Метод processExceptions должен вызывать метод BEAN.methodThrowExceptions и обрабатывать исключения:
2.1. если возникло исключение FileSystemException, то логировать его (вызвать метод BEAN.log) и пробросить дальше
2.2. если возникло исключение CharConversionException или любое другое IOException, то только логировать его - вызвать метод BEAN.log
3. Добавь в сигнатуру метода processExceptions класс исключения, которое ты пробрасываешь в п.2.1.
4. В методе main обработай оставшееся исключение - логируй его. Используй try..catch

Подсказка:
Если ты захватил исключение MyException, которое не хотел захватывать, его можно пробросить дальше кодом вида:
catch (MyException e) {
throw e;
}
*/

public class Solution {
    public static StatelessBean BEAN = new StatelessBean();

    public static void main(String[] args)
    {
        try
        {
            processExceptions();
        }
        catch (FileSystemException e)
        {
            BEAN.log(e);
        }
    }

    public static void processExceptions() throws FileSystemException
    {
        try
        {
            BEAN.methodThrowExceptions();
        }
        catch (FileSystemException e)
        {
            BEAN.log(e);
            throw e;
        }
        catch (IOException e)
        {
            BEAN.log(e);
        }
    }

    public static class StatelessBean
    {
        public void log(Exception exception)
        {
            System.out.println(exception.getMessage() + ", " + exception.getClass().getSimpleName());
        }

        public void methodThrowExceptions() throws CharConversionException, FileSystemException, IOException
        {
            int i = (int) (Math.random() * 3);
            if (i == 0)
                throw new CharConversionException();
            if (i == 1)
                throw new FileSystemException("");
            if (i == 2)
                throw new IOException();
        }
    }
}



******************


package com.javarush.test.level09.lesson08.task04;

import java.io.IOException;
import java.rmi.RemoteException;

/* Перехват checked исключений
В методе processExceptions обработайте все checked исключения.
Нужно вывести на экран каждое возникшее checked исключение.
Можно использовать только один блок try..
*/

public class Solution {
    public static void main(String[] args) {
        processExceptions(new Solution());

    }

    public static void processExceptions(Solution obj) {
        try
        {
            obj.method1();
            obj.method2();
            obj.method3();
        }
        catch (NoSuchFieldException e)
        {
            System.out.println(e);
        }
        catch (RemoteException e)
        {
            System.out.println(e);
        }
        catch (IOException e)
        {
            System.out.println(e);
        }
    }

    public void method1() throws IOException {
        throw new IOException();
    }

    public void method2() throws NoSuchFieldException {
        throw new NoSuchFieldException();
    }

    public void method3() throws RemoteException {
        throw new RemoteException();
    }
}



*****************


package com.javarush.test.level09.lesson08.task05;

/* Перехват unchecked исключений
В методе processExceptions обработайте все unchecked исключения.
Нужно вывести стек-трейс каждого возникшего исключения используя метод printStack.
Можно использовать только один блок try..
*/

public class Solution
{
    public static void main(String[] args) {
        processExceptions(new Solution());
    }

    public static void processExceptions(Solution obj) {
        try
        {
            obj.method1();
            obj.method2();
            obj.method3();
        }
        catch (NullPointerException e)
        {
            printStack(e);
        }
        catch (IndexOutOfBoundsException e)
        {
            printStack(e);
        }
        catch (NumberFormatException e)
        {
            printStack(e);
        }
    }

    public static void printStack(Throwable throwable) {
        System.out.println(throwable);
        for (StackTraceElement element : throwable.getStackTrace()) {
            System.out.println(element);
        }
    }

    public void method1(){
        throw new NullPointerException();
    }

    public void method2() {
        throw new IndexOutOfBoundsException();
    }

    public void method3() {
        throw new NumberFormatException();
    }
}



******************



package com.javarush.test.level08.lesson11.bonus01;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;


/* Номер месяца
Программа вводит с клавиатуры имя месяца и выводит его номер на экран в виде: «May is 5 month».
Используйте коллекции.
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String month = reader.readLine();

        List<String> list =  new  ArrayList<String>();
        list.add("January");
        list.add("February");
        list.add("March");
        list.add("April");
        list.add("May");
        list.add("June");
        list.add("July");
        list.add("August");
        list.add("September");
        list.add("October");
        list.add("November");
        list.add("December");
        
        int i=0;
        for (String text : list)
        {
            i++;
            if (month.equals(text))
                System.out.print(text+" is "+ i +" month");
        }
    }
}

// через HashMap не захотело работать, хотя в IDE всё отрабатывало как надо.
// Еще решали через Date - создаешь переменную типа Date, куда в качестве месяца заносишь свою переменную s (которую считываешь с клавиатуры), а в качестве дня и года — произвольные числа :)
а при выводе на экран через date.getMonth() — не забываешь, что в Java отсчет идёт от 0.




*********************



package com.javarush.test.level08.lesson11.bonus03;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/* Задача по алгоритмам
Задача: Введи с клавиатуры 20 слов и выведи их в алфавитном порядке.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String[] array = new String[20];
        for (int i = 0; i < array.length; i++)
        {
            array[i] = reader.readLine();
        }

        sort(array);

        for (String x : array)
        {
            System.out.println(x);
        }
    }

    public static void sort(String[] array)
    {
        //напишите тут ваш код
        //сортируем методом пузырька, используя метод сверки
        //между собой для каждых 2 строк
        for (int i=0; i<array.length-1;){
            int s = i+1;
            String temp = null;
            //сначала отправляем первое и второе значение на сверку
            if(isGreaterThan(array[i], array[s])){
                temp = array[s];
                array[s]=array[i];
                array[i]=temp;
                if (i>0) i--;
            }
            else i++;

        }

    }

    //Метод для сравнения строк: 'а' больше чем 'b'
    public static boolean isGreaterThan(String a, String b)
    {

        //вернёт true если а больше б
        //вернёт false если а меньше б
        return a.compareTo(b) > 0;
    }
} 



********************



package com.javarush.test.level08.lesson11.bonus02;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.List;

/* Нужно добавить в программу новую функциональность
Задача: Программа определяет, какая семья (фамилию) живёт в доме с указанным номером.
Новая задача: Программа должна работать не с номерами домов, а с городами:
Пример ввода:
Москва
Ивановы
Киев
Петровы
Лондон
Абрамовичи

Лондон

Пример вывода:
Абрамовичи
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        //Создадим карту и внесем в неё список в формате Город-Фамилия
        HashMap<String,String> map = new HashMap<String, String>();
        //считаем с клавиатуры и запишем данные

        while (true){
            String s1= reader.readLine();
            if (s1.isEmpty()) break;
            else {
                String s2 = reader.readLine();
                map.put(s1,s2);
            }
        }


        //узнаем вопрос про город
        String city = reader.readLine();

        //выводим город
        for (Map.Entry<String,String> pair : map.entrySet()){
            if (pair.getKey().equals(city)) System.out.println(pair.getValue());
        }
    }
}

Или можно решить так:

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        HashMap<String,String> map = new HashMap<>();

        while (true){
            String city = reader.readLine();
            if (city.isEmpty()) 
                break;
            String family = reader.readLine();
            map.put(city, family);
        }

        String  city = reader.readLine();
        String family = map.get(city);
        System.out.println(family);		
		
Тоже красиво.		



*****************


package com.javarush.test.level09.lesson11.home01;

/* Деление на ноль
Создай метод public static void divisionByZero, в котором подели любое число на ноль и выведи на экран результат деления.
Оберни вызов метода divisionByZero в try..catch. Выведи стек-трейс исключения используя метод exception.printStackTrace()
*/

public class Solution {

    public static void main(String[] args)
    {
        try
        {
            divisionByZero();
        }
        catch (Exception e)
        {
               e.printStackTrace();
        }

    }

    public static void divisionByZero()
    {
        int a = 5/0;
        System.out.println(a);
    }
}


*****************


package com.javarush.test.level09.lesson11.home02;

/* Обратный отсчёт от 10 до 0
Написать в цикле обратный отсчёт от 10 до 0. Для задержки иcпользовать Thread.sleep(100);
Обернуть вызов sleep в try..catch.
*/

public class Solution
{
    public static void main(String[] args)
    {
        for (int i = 10; i >= 0; i--)
        {
            System.out.println(i);

            //напишите тут ваш код
            try
            {
                Thread.sleep(100);
            }
            catch (Exception e)
            {
                
            }
        }
    }
}


********************


package com.javarush.test.level09.lesson11.home03;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;

/* Метод в try..catch
Вводить с клавиатуры числа. Код по чтению чисел с клавиатуры вынести в отдельный метод readData.
Обернуть все тело (весь код внутри readData, кроме объявления списка, где будут храниться числа и BufferedReader - а) этого метода в try..catch.
Если пользователь ввёл какой-то текст, вместо ввода числа, то метод должен перехватить исключение и вывести на экран все введенные числа в качестве результата.
Числа выводить с новой строки сохраняя порядок ввода.
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        readData();
    }

    public static void readData() throws IOException
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<Integer> number = new ArrayList<Integer>();

        try
        {
            while (true)
            {
                int nextNumber = Integer.parseInt(reader.readLine());
                number.add(nextNumber);
            }
        }
        catch (NumberFormatException e)
        {
            for (int n : number)
            {
                System.out.println(n);
            }
        }

    }
}



*******************


package com.javarush.test.level09.lesson11.home04;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

/* Конвертер дат
Ввести с клавиатуры дату в формате «08/18/2013»
Вывести на экран эту дату в виде «AUG 18, 2013».
Воспользоваться объектом Date и SimpleDateFormat.
*/

public class Solution {

    public static void main(String[] args) throws Exception {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String s = reader.readLine();

        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
        Date givenDate = formatter.parse(s);
		
        SimpleDateFormat formatterprint = new SimpleDateFormat("MMM dd, yyyy", Locale.US);
        System.out.println(formatterprint.format(givenDate).toUpperCase());
    }
}



*********************


package com.javarush.test.level09.lesson11.home05;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Гласные и согласные буквы
Написать программу, которая вводит с клавиатуры строку текста.
Программа должна вывести на экран две строки:
1. первая строка содержит только гласные буквы
2. вторая - только согласные буквы и знаки препинания из введённой строки.
Буквы соединять пробелом, каждая строка должна заканчиваться пробелом.

Пример ввода:
Мама мыла раму.
Пример вывода:
а а ы а а у
М м м л р м .
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        //напишите тут ваш код
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String s = reader.readLine();

        char [] charArray = s.toCharArray(); //создаем массив, куда поместим строку с консоли, и которую переводим в char

        ArrayList <Character> listCharVowels = new ArrayList <Character>(); //список для гласных
        ArrayList <Character> listCharNonVowels = new ArrayList <Character>(); //список для согласных

        for (int i=0; i < charArray.length; i++) //бежим по массиву
        {
            if (isVowel(charArray[i])) //проверяем условие методом isVowel если текуший символ гласная
            {
                listCharVowels.add(charArray[i]); //помещаем гласную в свой список
            }
            else if (charArray [i] == ' ')// проверяем есть ли пробел, и пропускаем его
            {
                continue;
            }
            else
            {
                listCharNonVowels.add(charArray[i]); //остальные буквы или другие символы(точка например), помещаем в свой список
            }
        }

        for (char c : listCharVowels)//бежим по списку, в который положили гласные
        {
            System.out.print(c + " "); //выводи гланые на экран, не забываем пробел между ними
        }

        System.out.println(); // переводим курсов на другую строчку

        for (char c : listCharNonVowels) //бежим по списку согласных
        {
            System.out.print(c + " "); //выводим на экран все остальные символы, через пробел
        }
    }


    public static char[] vowels = new char[]{'а', 'я', 'у', 'ю', 'и', 'ы', 'э', 'е', 'о', 'ё'};

    //метод проверяет, гласная ли буква
    public static boolean isVowel(char c)
    {
        c = Character.toLowerCase(c);  //приводим символ в нижний регистр - от заглавных к строчным буквам

        for (char d : vowels)   //ищем среди массива гласных
        {
            if (c == d)
                return true;
        }
        return false;
    }
}



**********************



package com.javarush.test.level09.lesson11.home06;

import java.util.ArrayList;

/* Сказка «Красная Шапочка»
1. Есть пять классов: красная шапочка, бабушка, пирожок, дровосек, волк.
2. У каждого класса есть 2 поля: убил (killed ArrayList) и съел (ate ArrayList).
3. Необходимые объекты созданы (hood, grandmother, ...).
4. Расставь правильно связи, кто кого съел и убил, чтобы получилась логика сказки «Красная Шапочка».
PS: пирожки никто не ел. Их только несли. Волк чуток поел. А его потом убили.
*/

public class Solution
{
    public static LittleRedRidingHood hood = new LittleRedRidingHood();
    public static Grandmother grandmother = new Grandmother();
    public static Patty patty = new Patty();
    public static Woodman woodman = new Woodman();
    public static Wolf wolf = new Wolf();

    public static void main(String[] args)
    {
        // напишите тут ваш код
        wolf.ate.add(grandmother);
        wolf.ate.add(hood);
        woodman.killed.add(wolf);
    }

    //красная шапочка
    public static class LittleRedRidingHood extends StoryItem
    {
    }

    //бабушка
    public static class Grandmother extends StoryItem
    {
    }

    //пирожок
    public static class Patty extends StoryItem
    {
    }

    //дровосек
    public static class Woodman extends StoryItem
    {
    }

    //волк
    public static class Wolf extends StoryItem {
    }


    public static abstract class StoryItem
    {
        public ArrayList<StoryItem> killed = new ArrayList<StoryItem>();
        public ArrayList<StoryItem> ate = new ArrayList<StoryItem>();
    }
}

// Правильный ответ - всего 3 строчки!!!!!



*********************



package com.javarush.test.level09.lesson11.home07;

/* Расставь модификаторы static
Расставь модификаторы static так, чтобы пример скомпилировался.
*/

public class Solution
{
    public  static int A = 5;
    public  static int B = 2 * A;
    public  int C = A * B;
    public  static int D = A * B;

    public void main(String[] args)
    {
        Solution room = new Solution();
        room.A = 5;

        Solution.D = 5;
    }

    public int getA()
    {
        return A;
    }

}

// поставил static на три переменные, а на main не нужно было оказывается (я поставил, но в условии static там не было).



*******************



package com.javarush.test.level09.lesson11.home08;

import java.util.ArrayList;

/* Список из массивов чисел
Создать список, элементами которого будут массивы чисел.
Добавить в список пять объектов–массивов длиной 5, 2, 4, 7, 0 соответственно. Заполнить массивы любыми данными и вывести их на экран.
*/

public class Solution
{
    public static void main(String[] args)
    {
        ArrayList<int[]> list = createList();
        printList(list);
    }

    public static ArrayList<int[]> createList()
    {
        //напишите тут ваш код
        ArrayList<int[]> list = new ArrayList<int[]>();

        int[] list5 = {1, 2, 3, 4, 5};
        int[] list2 = {12, 13};
        int[] list4 = {21, 22, 23, 24};
        int[] list7 = {11, 12, 13, 14, 15, 16, 17};
        int[] list0 = new int[0];

        list.add(list5);
        list.add(list2);
        list.add(list4);
        list.add(list7);
        list.add(list0);

        return list;
    }

    public static void printList(ArrayList<int[]> list)
    {
        for (int[] array: list )
        {
            for (int x: array)
            {
                System.out.println(x);
            }
        }
    }
}


********************


package com.javarush.test.level09.lesson11.home09;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/* Десять котов
Создать класс кот – Cat, с полем «имя» (String).
Создать словарь Map(<String, Cat>) и добавить туда 10 котов в виде «Имя»-«Кот».
Получить из Map множество(Set) всех имен и вывести его на экран.
*/

public class Solution
{
    public static void main(String[] args)
    {
        Map<String, Cat> map = createMap();
        Set<Cat> set = convertMapToSet(map);
        printCatSet(set);
    }

    public static Map<String, Cat> createMap()
    {
        //напишите тут ваш код
        Map<String, Cat> cats = new HashMap<String, Cat>();
        cats.put("Bil", new Cat("Bil"));
        cats.put("Fil", new Cat("Fil"));
        cats.put("Nil", new Cat("Kil"));
        cats.put("Pil", new Cat("Pil"));
        cats.put("Til", new Cat("Til"));
        cats.put("Ril", new Cat("Ril"));
        cats.put("Dil", new Cat("Dil"));
        cats.put("Mil", new Cat("Mil"));
        cats.put("Cil", new Cat("Cil"));
        cats.put("Wil", new Cat("Wil"));
        
        return cats;
    }

    public static Set<Cat> convertMapToSet(Map<String, Cat> map)
    {
        //напишите тут ваш код
        Set<Cat> set = new HashSet<Cat>();

        for (Map.Entry<String, Cat> pair : map.entrySet()){
            set.add(pair.getValue());
        }

        return set;
    }

    public static void printCatSet(Set<Cat> set)
    {
        for (Cat cat:set)
        {
            System.out.println(cat);
        }
    }

    public static class Cat
    {
        private String name;

        public Cat(String name)
        {
            this.name = name;
        }

        public String toString()
        {
            return "Cat "+this.name;
        }
    }

}


***********************



package com.javarush.test.level09.lesson11.bonus01;

import java.io.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


/* Нужно исправить программу, чтобы компилировалась и работала
Задача: Программа вводит два имени файла. И копирует первый файл на место заданное вторым именем.
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        String sourceFileName = reader.readLine();
        String destinationFileName = reader.readLine();

        FileInputStream fileInputStream = new FileInputStream(sourceFileName);
        FileOutputStream fileOutputStream = new FileOutputStream(destinationFileName);

        int count = 0;

        while (fileInputStream.available() > 0)
        {
            int data = fileInputStream.read();
            fileOutputStream.write(data);
            count++;
        }

        System.out.println("Скопировано байт " + count);

        fileInputStream.close();
        fileOutputStream.close();
    }
}


**********************



package com.javarush.test.level09.lesson11.bonus02;

import java.io.*;

/* Нужно добавить в программу новую функциональность
Задача: Программа вводит два имени файла. И копирует первый файл на место, заданное вторым именем.
Новая задача: Программа вводит два имени файла. И копирует первый файл на место, заданное вторым именем.
Если файла (который нужно копировать) с указанным именем не существует, то
программа должна вывести надпись «Файл не существует.» и еще раз прочитать имя файла с консоли, а уже потом считывать файл для записи.
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        String   sourceFileName = reader.readLine();
        FileInputStream fileInputStream = null;

        try
        {
            fileInputStream = new FileInputStream(sourceFileName);
        }
        catch (Exception e)
        {
            System.out.println("Файл не существует.");
            sourceFileName = reader.readLine();
            fileInputStream = new FileInputStream(sourceFileName);
        }

        String destinationFileName = reader.readLine();
        FileOutputStream fileOutputStream = new FileOutputStream(destinationFileName);

        while (fileInputStream.available() > 0)
        {
            int data = fileInputStream.read();
            fileOutputStream.write(data);
        }

        fileInputStream.close();
        fileOutputStream.close();
    }
}



*********************



package com.javarush.test.level09.lesson11.bonus03;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Задача по алгоритмам
Задача: Пользователь вводит с клавиатуры список слов (и чисел). Слова вывести в возрастающем порядке, числа - в убывающем.
Пример ввода:
Вишня
1
Боб
3
Яблоко
2
0
Арбуз
Пример вывода:
Арбуз
3
Боб
2
Вишня
1
0
Яблоко
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<String> list = new ArrayList<String>();
        while (true)
        {
            String s = reader.readLine();
            if (s.isEmpty()) break;
            list.add(s);
        }

        String[] array = list.toArray(new String[list.size()]);
        sort(array);

        for (String x : array)
        {
            System.out.println(x);
        }
    }

    public static void sort(String[] array)
    {
        //напишите тут ваш код
        for (int i=0; i<array.length;i++)
        {
            if(!isNumber(array[i]))
            {
                for(int j =  i; j < array.length ; j++)
                {
                    if(!isNumber(array[j]))
                    {
                        if (isGreaterThan(array[i], array[j]))
                        {
                            String tmp = array[i];
                            array[i] = array[j];
                            array[j] = tmp;
                        }
                    }
                }
            }
            if(isNumber(array[i]))
            {
                for(int j =  i; j < array.length ; j++)
                {
                    if(isNumber(array[j]))
                    {
                        if (Integer.parseInt(array[i])<Integer.parseInt(array[j]))
                        {
                            String tmp = array[i];
                            array[i] = array[j];
                            array[j] = tmp;
                        }
                    }
                }
            }
        }

    }

    //Метод для сравнения строк: 'а' больше чем 'b'
    public static boolean isGreaterThan(String a, String b)
    {
        return a.compareTo(b) > 0;
    }


    //строка - это на самом деле число?
    public static boolean isNumber(String s)
    {
        if (s.length() == 0) return false;

        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++)
        {
            char c = chars[i];
            if ((i != 0 && c == '-') //есть '-' внутри строки
                    || (!Character.isDigit(c) && c != '-') ) // не цифра и не начинается с '-'
            {
                return false;
            }
        }
        return true;
    }
}



Или такой вариант:

public static void sort(String[] array)
    {
        ArrayList<Integer> stringList = new ArrayList<>();
        ArrayList<Integer> intList = new ArrayList<>();

        for (int i = 0; i < array.length; i++)
        {
            if (isNumber(array[i])) {
                intList.add(i);
            } else {
                stringList.add(i);
            }
        }

        for (int i = (stringList.size() - 1); i > 0; i--)
        {
            for (int j = 0; j < i; j++)
            {
                int num = stringList.get(j);
                int numNext = stringList.get(j + 1);
                if (isGreaterThan(array[num], array[numNext])) {
                    String tmp = array[num];
                    array[num] = array[numNext];
                    array[numNext] = tmp;
                }
            }
        }

        for (int i = (intList.size() - 1); i > 0; i--)
        {
            for (int j = 0; j < i; j++)
            {
                int num = intList.get(j);
                int numNext = intList.get(j + 1);
                if (Integer.parseInt(array[numNext]) > Integer.parseInt(array[num])) {
                    String tmp = array[num];
                    array[num] = array[numNext];
                    array[numNext] = tmp;
                }
            }
        }
    }


Или такой вариант:

public static void sort(String[] array)
    {
        //Напишите тут ваш код


        int counterW = 0;
        int counterN = 0;
        for (int i=0;i<array.length;i++) {
             if (isNumber(array[i])){

                 counterN++;
             }
            else    counterW++;

        }



        String[] words = new String[counterW];
        String[] numbers = new String[counterN];

        counterW=0;counterN=0;

       for (int i=0;i<array.length;i++) {
            if (isNumber(array[i])) {
                numbers[counterN]=array[i]; counterN++;
            }
            else {words[counterW]=array[i]; counterW++;}
        }

        //descending bubble sort:
        String temp;
        for (int i=0;i<numbers.length;i++) {
            for (int j=1;j<numbers.length-i;j++) {
                int a = Integer.parseInt(numbers[j-1]);
                int b = Integer.parseInt(numbers[j]);
                if(a<b) {
                    temp =numbers[j-1];
                    numbers[j-1]=numbers[j];
                    numbers[j]=temp;
                }
            }
        }
        // increasing bubble sort
        for (int i=0;i<words.length;i++) {
            for (int j=0;j<words.length-1;j++) {
                 if (isGreaterThen(words[j],words[j+1])){
                     temp = words[j];
                     words[j]=words[j+1];
                     words[j+1]=temp;

                 }
            }
        }
        counterW=0;counterN=0;
        for (int i=0;i<array.length;i++) {
          if (isNumber(array[i])) {
              array[i]=numbers[counterN]; counterN++;
          }
            else {array[i]=words[counterW]; counterW++;}
        }

    }

	
	
************************



- Вот как нужно присваивать переменные разных типов:

byte a = 115;
int b = a; 	
Расширение типа. Все отлично.

int c = 10000;
byte d = (byte) c; 	
Сужение типа. Нужно явно отбросить лишние байты.

int c = 10;
byte d = (byte) c; 	
Сужение типа. Нужно явно отбросить лишние байты, даже если они равны 0.

float f = 10000;
long l = (long) (f * f);
float f2 = l;
long l2 = (long) f2; 	
При присваивании к float, происходит расширение типа. При присваивании значения float к long, происходит сужение – необходимо приведение типа.

double d = 1;
float f = (float) d;
long l = (long) f;
int i = (int) l;
short s = (short) i;
byte b = (byte) s; 	
Сужение во всех операция присваивания, кроме первой строки, требует указания явного преобразования типа.

- Оператор приведения типа нужно указывать перед числом/переменной каждый раз, когда происходит отбрасывание части числа или сужение типа. Он действует только на число/переменную, которое идет непосредственно за ним.

float f = 10000;
long l = (long) f * f; 	
К типу long приводится только одна переменная из двух: умножение long и float дает float.

float f = 10000;
long l = (long) (f * f); 	
Тут все выражение приводится к типу long.	


***************



package com.javarush.test.level10.lesson04.task01;

/* Задача №1 на преобразование целых типов
Расставьте правильно операторы приведения типа, чтобы получился ответ: d > 0
int a = 0;
int b = (byte) a + 46;
byte c = (byte) (a*b);
double f = (char) 1234.15;
long d = (short) (a + f / c + b);
*/

public class Solution
{
    public static void main(String[] args)
    {
        int a = 0;
        int b = (byte) a + 46;
        byte c = (byte) (a*b);
        double f = (char) 1234.15;
        long d = (char) (a + f / c + b);
        System.out.println(d);
    }
}



******************


package com.javarush.test.level10.lesson04.task02;

/* Задача №2 на преобразование целых типов
Расставьте правильно операторы приведения типа, чтобы получился ответ: d=3.765
int a = 15;
int b = 4;
float c = a / b;
double d = a * 1e-3 + c;
*/

public class Solution
{
    public static void main(String[] args)
    {
        int a = 15;
        int b = 4;
        float c = (float) a / (float) b;
        double d = a * 1e-3 + c;

        System.out.println(d);
    }
}



***************



package com.javarush.test.level10.lesson04.task03;

/* Задача №3 на преобразование целых типов
Добавить одну операцию по преобразованию типа, чтобы получался ответ: b=0
float f = (float)128.50;
int i = (int)f;
int b = (int)(i + f);
*/

public class Solution
{
    public static void main(String[] args)
    {
        float f = (float)128.50;
        int i = (int)f;
        int b = (byte)(i + f);
        System.out.println(b);
    }
}


****************



package com.javarush.test.level10.lesson04.task04;

/* Задача №4 на преобразование целых типов
Добавить одну операцию по преобразованию типа, чтобы получался ответ: nine=9
short number = 9;
char zero = '0';
int nine = (zero + number);
*/

public class Solution
{
    public static void main(String[] args)
    {
        short number = 9;
        char zero = '0';
        int nine = (zero + number);

        System.out.println((char) nine);
    }
}

// Добавил (char) в вывод значения nine.



******************



package com.javarush.test.level10.lesson04.task05;

/* Задача №5 на преобразование целых типов
Расставьте правильно операторы приведения типа, чтобы получился ответ: c=256
int a = (byte)44;
int b = (byte)300;
short c = (byte)(b - a);
*/

public class Solution
{
    public static void main(String[] args)
    {
        int a = (byte)44;
        int b = (short)300;
        short c = (short) (b - a);
        System.out.println(c);
    }
}



************************



Если мы складываем String и «любой другой тип», то второй объект преобразуется к типу String.

-  Все операции выполняются слева направо, поэтому сложение 5 + '\u0000' происходит как сложение целых чисел. Т.е. сначала произойдет сложение чисел, а затем – преобразование их к строке.


*****************



package com.javarush.test.level10.lesson11.home01;

/* Правильный ответ: d=2.941
Добавить одну операцию по преобразованию типа, чтобы получался ответ: d=2.941.
Пример вывода: 2.9411764705882355
*/

public class Solution
{
    public static void main(String[] args)
    {
        int a = 50;
        int b = 17;
        double d = ((double) a) / b;
        System.out.println(d);
    }
}



*************************



package com.javarush.test.level10.lesson11.home02;

/* Правильный ответ: d=5.5
Добавить одну операцию по преобразованию типа, чтобы получался ответ: d=5.5.
*/

public class Solution
{
    public static void main(String[] args)
    {
        int a = 5;
        int b = 4;
        int c = 3;
        int e = 2;
        double d = a +  b/c/ (double) e;
        System.out.println(d);
    }
}



*************************



package com.javarush.test.level10.lesson11.home03;

/* Правильный ответ: d=1.0
Добавить одну операцию по преобразованию типа, чтобы получался ответ: d=1.0.
*/

public class Solution
{
    public static void main(String[] args)
    {
        int a = 257;
        int b = 4;
        int c = 3;
        int e = 2;
        double d = (byte)a + b/c/e;

        System.out.println(d);
    }
}



************************



package com.javarush.test.level10.lesson11.home04;

/* Большая зарплата
Вывести на экран надпись «Я не хочу изучать Java, я хочу большую зарплату» 40 раз по образцу.
Образец:
Я не хочу изучать Java, я хочу большую зарплату
 не хочу изучать Java, я хочу большую зарплату
не хочу изучать Java, я хочу большую зарплату
е хочу изучать Java, я хочу большую зарплату
 хочу изучать Java, я хочу большую зарплату
хочу изучать Java, я хочу большую зарплату
…
*/

public class Solution
{
    public static void main(String[] args)
    {
        String s = "Я не хочу изучать Java, я хочу большую зарплату";

        //напишите тут ваш код
        for (int i = 0; i < 40; i++) {
            System.out.println(s.substring(i));
        }
    }

}



**********************



package com.javarush.test.level10.lesson11.home05;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Количество букв
Ввести с клавиатуры 10 строчек и подсчитать в них количество различных букв (для 33 букв алфавита).  Вывести результат на экран.
Пример вывода:
а 5
б 8
в 3
г 7
д 0
…
я 9
*/

public class Solution
{
    public static void main(String[] args)  throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        //алфавит
        String abc = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";
        char[] abcArray = abc.toCharArray();

        ArrayList<Character> alphabet = new ArrayList<Character>();
        for (int i = 0; i < abcArray.length; i++)
        {
            alphabet.add(abcArray[i]);
        }

        //ввод строк
        ArrayList<String> list = new ArrayList<String>();
        for (int i = 0; i < 10; i++)
        {
            String s = reader.readLine();
            list.add(s.toLowerCase());
        }

        //напишите тут ваш код
        int[] counter = new int[33];

        for (int i = 0; i < list.size(); i++){
            char[] nextWord = list.get(i).toCharArray();
            for (int j = 0; j < nextWord.length; j++){
                int indexOfLetter = alphabet.indexOf(nextWord[j]);
                counter[indexOfLetter]++;
            }
        }
        for (int i = 0; i < counter.length; i++){
            System.out.println(alphabet.get(i) + " " + counter[i]);
        }
    }

}



*********************


package com.javarush.test.level10.lesson11.home06;

/* Конструкторы класса Human
Напиши класс Human с 6 полями. Придумай и реализуй 10 различных конструкторов для него. Каждый конструктор должен иметь смысл.
*/

public class Solution
{
    public static void main(String[] args)
    {

    }

    public static class Human
    {
        //напишите тут ваши переменные и конструкторы

        private String name;
        private String surname;
        private int age;
        private String address;
        private int phone;
        private String car;

        public Human(String name)
        {
            this.name = name;
        }

        public Human(String name, String surname)
        {
            this.name = name;
            this.surname = surname;
        }

        public Human(String name, String surname, int age)
        {
            this.name = name;
            this.surname = surname;
            this.age = age;
        }

        public Human(String name, String surname, int age, String address)
        {
            this.name = name;
            this.surname = surname;
            this.age = age;
            this.address = address;
        }

        public Human(String name, String surname, int age, String address, int phone)
        {
            this.name = name;
            this.surname = surname;
            this.age = age;
            this.address = address;
            this.phone = phone;
        }

        public Human(String name, String surname, int age, String address, int phone, String car)
        {
            this.name = name;
            this.surname = surname;
            this.age = age;
            this.address = address;
            this.phone = phone;
            this.car = car;
        }

        public Human(String surname, int age)
        {
            this.surname = surname;
            this.age = age;
        }

        public Human(String surname, int age, String address)
        {
            this.surname = surname;
            this.age = age;
            this.address = address;
        }

        public Human(String surname, int age, String address, int phone)
        {
            this.surname = surname;
            this.age = age;
            this.address = address;
            this.phone = phone;
        }

        public Human(String surname, int age, String address, int phone, String car)
        {
            this.surname = surname;
            this.age = age;
            this.address = address;
            this.phone = phone;
            this.car = car;
        }

    }
}


*****************



package com.javarush.test.level10.lesson11.home07;

/* Расставьте минимум static-ов
Расставьте как можно меньше модификаторов static так, чтобы пример скомпилировался.
*/

public class Solution
{
    public int A = 5;
    public static int B = 5;
    public static int C = 5;
    public static int D = 5;

    public static void main(String[] args)
    {
        Solution solution = new Solution();
        solution.A = 5;
        solution.B = 5 * B;
        solution.C = 5 * C * D;
        Solution.D = 5 * D * C;

        Solution.D = 5;
    }

    public int getA()
    {
        return A;
    }

}


// Было так:

    public int A = 5;
    public int B = 5;
    public int C = 5;
    public static int D = 5;
	
	

********************



package com.javarush.test.level10.lesson11.home08;

import java.util.ArrayList;

/* Массив списков строк
Создать массив, элементами которого будут списки строк. Заполнить массив любыми данными и вывести их на экран.
*/

public class Solution
{
    public static void main(String[] args)
    {
        ArrayList<String>[] arrayOfStringList =  createList();
        printList(arrayOfStringList);
    }

    public static ArrayList<String>[] createList()
    {
        //напишите тут ваш код
        ArrayList<String>[] arrayLists = new ArrayList[5];

        for (int i = 0; i < 5; i++){
            arrayLists[i] = new ArrayList<String>();
            for (int j = 0; j < 5; j++){
                arrayLists[i].add(i + " " + j);
            }
        }

        return arrayLists;
    }

    public static void printList(ArrayList<String>[] arrayOfStringList)
    {
        for (ArrayList<String> list: arrayOfStringList)
        {
            for (String s : list)
            {
                System.out.println(s);
            }
        }
    }
}



******************



package com.javarush.test.level10.lesson11.home09;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/* Одинаковые слова в списке
Ввести с клавиатуры в список 20 слов. Нужно подсчитать количество одинаковых слов в списке.
Результат нужно представить в виде словаря Map<String, Integer>, где первый параметр – уникальная строка,
а второй – число, сколько раз данная строка встречалась в списке.
Вывести содержимое словаря на экран.
В тестах регистр (большая/маленькая буква) влияет на результат.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        ArrayList<String> words = new ArrayList<String>();
        for (int i = 0; i < 20; i++)
        {
            words.add(reader.readLine());
        }

        Map<String, Integer> map = countWords(words);

        for (Map.Entry<String, Integer> pair : map.entrySet())
        {
            System.out.println(pair.getKey() + " " + pair.getValue());
        }
    }

    public static Map<String, Integer> countWords(ArrayList<String> list)
    {
        HashMap<String, Integer> result = new HashMap<String, Integer>();

        //Напишите тут ваш код
        for (String word : list){
            if (result.containsKey(word)){
                result.put(word, result.get(word) + 1);
            }
            else {
                result.put(word, 1);
            }
        }

        return result;
    }

}

// В map хранятся только уникальные ключи. Т.е. если вы добавляете ключ, который уже содержится в map, тогда значение просто перезаписывается.

*********************



 package com.javarush.test.level10.lesson11.home10;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* Безопасное извлечение из списка
Создать список целых чисел. Ввести с клавиатуры 20 целых чисел. Создать метод по безопасному извлечению чисел из списка:
int safeGetElement(ArrayList<Integer> list, int index, int defaultValue)
Метод должен возвращать элемент списка (list) по его индексу (index).
Если в процессе получения элемента возникло исключение, его нужно перехватить, и метод должен вернуть defaultValue.
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        ArrayList<Integer> list = new ArrayList<Integer>();
        for (int i = 0; i < 20; i++)
        {
            int x = Integer.parseInt(reader.readLine());
            list.add(x);
        }

        System.out.println(safeGetElement(list, 5, 1));
        System.out.println(safeGetElement(list, 20, 7));
        System.out.println(safeGetElement(list, -5, 9));
    }

    public static int safeGetElement(ArrayList<Integer> list, int index, int defaultValue)
    {
      //напишите тут ваш код
        int x;

        try
        {
            x = list.get(index);
        }
        catch (Exception e)
        {
           x=  defaultValue;
        }

        return x;
    }

}


***********************



package com.javarush.test.level10.lesson11.bonus01;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

/* Нужно исправить программу, чтобы компилировалась и работала
Задача: Программа демонстрирует работу HashMap: вводит с клавиатуры набор пар (номер и строку), помещает их в HashMap и выводит на экран содержимое HashMap.
*/

public class Solution {
    HashMap<Integer, String> map;
    Integer index;
    String name;

    public Solution()
    {
        this.map = new HashMap<Integer, String>();
        map.put(index, name);
    }

    public static void main(String[] args) throws IOException {

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        HashMap<Integer, String> map = new HashMap<Integer, String>();

        for (int i = 0; i < 10; i++)
        {
            int index = Integer.parseInt(reader.readLine());
            String name = reader.readLine();
            map.put(index, name);
        }

        for (Map.Entry<Integer, String> pair : map.entrySet()) {
            int index = pair.getKey();
            String name = pair.getValue();
            System.out.println("Id=" + index + " Name=" + name);
        }
    }
}

// Вот так было в условии:

public class Solution {
    HashMap<int, String> map;
    Integer index;
    String name;

    public Solution() {
        this.map = new HashMap<int, String>();
        map.put(index, name);
    }

    public static void main(String[] args) throws IOException {
        Solution solution = new Solution();
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        for (int i = 0; i < 10; i++) {
            int index = Integer.parseInt(reader.readLine());
            String name = reader.readLine();
            solution.map.put(index, name);
        }

        for (Map.Entry<int, String> pair : solution.map.entrySet()) {
            int index = pair.getKey();
            String name = pair.getValue();
            System.out.println("Id=" + index + " Name=" + name);
        }
    }
}



****************



package com.javarush.test.level10.lesson11.bonus02;

import java.io.*;
import java.util.*;

/* Нужно добавить в программу новую функциональность
Задача: Программа вводит с клавиатуры пару (число и строку) и выводит их на экран.
Новая задача: Программа вводит с клавиатуры пары (число и строку), сохраняет их в HashMap.
Пустая строка – конец ввода данных. Числа могу повторяться. Строки всегда уникальны. Введенные данные не должны потеряться!
Затем программа выводит содержание HashMap на экран.

Пример ввода:
1
Мама
2
Рама
1
Мыла

Пример вывода:
1 Мыла
2 Рама
1 Мама
*/

public class Solution
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        Map<String,Integer> map = new HashMap<String,Integer>();

        while(true ) {
            int number;

            String s = reader.readLine();
            if(!s.equals(""))
                number = Integer.parseInt(s);

            else break;

            String name = reader.readLine();
            if (name.equals("")) break;

            map.put(name,number) ;
        }

        for (Map.Entry<String,Integer> pair: map.entrySet()) {
            System.out.println(pair.getValue() + " " + pair.getKey());
        }
    }
}

// В map хранятся только уникальные ключи. Т.е. если вы добавляете ключ, который уже содержится в map, тогда значение просто перезаписывается.



***********************



package com.javarush.test.level10.lesson11.bonus03;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/* Задача по алгоритмам
Задача: ввести с клавиатуры 30 чисел. Вывести 10-е и 11-е минимальные числа.
Пояснение:
Самое минимальное число – 1-е минимальное.
Следующее минимальное после него – 2-е минимальное
Пример:
1 6 5  7  1  15   63   88
Первое минимальное – 1
Второе минимальное – 1
Третье минимальное – 5
Четвертое минимальное – 6
*/

public class Solution
{
    public static void main(String[] args) throws Exception
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int[] array = new int[30];
        for (int i = 0; i < 30; i++)
        {
            array[i] = Integer.parseInt(reader.readLine());
        }

        sort(array);

        System.out.println(array[9]);
        System.out.println(array[10]);
    }

    public static void sort(int[] array)
    {
        //напишите тут ваш код

        for (int i = array.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if(array[j] > array[j + 1]){
                    int tmp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = tmp;
                }
            }
        }
    }
}

// Или такое решение:

for (int i=1;i<array.length;i++) {
            int current = array[i];
            int previous = i-1;
            while(previous>=0 && array[previous]>current) {
                array[previous+1] = array[previous];
                array[previous]=current;
                previous--;
            }
}





******************


/**
 * Created by afisenko on 18.10.2016.
 */

class Main {

    public static void main(String[] args) {
        int[] num = new int[10];
        for (int i = 0; i < 10; i++) {
            num[i] = i;
        }

        printnum(num);

        sortAll(num);

        printnum(num);


    }

    public static void printnum(int[] num) {
        for (int i = 0; i < 10; i++) {
            System.out.print(num[i]);
        }
        System.out.println("");
    }

    public static void sortAll(int[] num) {

	/*  for (int i = 0; i <num.length/2; i++) {
            int tmp = num[i];
            num[i] = num[num.length - i - 1];
            num[num.length - i - 1] = tmp;
        }*/

        // А это уже мой аналог переворачивания массива
		
        int[] sum = num;

        for (int i = 0; i < num.length; i++) {
            num[i] = sum[sum.length - i - 1];
        }

        printnum(num);  // Просто проверяю значения внутри самого метода
    }

}



****************

Пример альтернативы обычной конкатенации строк, с использованием паттерна builder:

public class Human {

    private final String month = "May";
    private final int day = 9;
    private final int year = 1982;
	
    private final String song = "Happy New Year, Happy New ";

    public static void main(String[] args) {
        Human human = new Human();
        printDate(human.day, human.month, human.year);
    }

    private static void printDate(final int day, final String month, final int year) {
        final StringBuilder message = new StringBuilder("Today is: ");
        message.append(day);
        message.append(" ");
        message.append(month);
        message.append(" ");
        message.append(year);
        System.out.println(message);
    }
	
	// Или еще короче
	
	private static void printDate(final int day, final String month, final int year) {
        final StringBuilder message = new StringBuilder("Today is: ")
        .append(day)
        .append(" ")
        .append(month)
        .append(" ")
        .append(year);
        System.out.println(message);
    }
	
	// Альтернатива, где указываем сразу длину массива char-ов (из которых и состоят строки - ведь, не забываем, что строка, это массив чаров, а не просто слова)
	
	private static void printDate(final int day, final String month, final int year) {
        final StringBuilder message = new StringBuilder(40)
        .append("Today is: ")
        .append(day)
        .append(" ")
        .append(month)
        .append(" ")
        .append(year);
        System.out.println(message);
    }
	
	// И еще короче
	
	private static void printDate(final int day, final String month, final int year) {
        System.out.println(new StringBuilder("Today is: ")
        .append(day)
        .append(" ")
        .append(month)
        .append(" ")
        .append(year));

    }

}



http://docs.oracle.com/javase/tutorial/java/data/strings.html



public class WinnerController {

    public Figure getWinner(final Field field) {
        try {
            for (int i = 0; i < 3; i++)
                if (check(field, new Point(i, 0), new Point(i, 1), new Point(i, 2)))
                    return field.getFigure(new Point(i, 0));

            for (int i = 0; i < 3; i++)
                if (check(field, new Point(0, i), new Point(1, i), new Point(2, i)))
                    return field.getFigure(new Point(0, i));

            if (check(field, new Point(0, 0), new Point(1, 1), new Point(2, 2)))
                return field.getFigure(new Point(0, 0));

            if (check(field, new Point(0, 2), new Point(1, 1), new Point(2, 0)))
                return field.getFigure(new Point(1, 1));
            
        } catch (InvalidPointException e) {
            e.printStackTrace();
        }
    }

    private boolean check(final Field field, final Point p1, final Point p2, final Point p3) {
        try {
            if (field.getFigure(p1) == null) return false;
            if (field.getFigure(p1) == field.getFigure(p2) &&
                    field.getFigure(p1) == field.getFigure(p3))
                return true;
        } catch (InvalidPointException e) {
            e.printStackTrace();
        }
        return false;
    }

}

// Запишу сюда заметки по проекту игры ХО.  Мы сделали проверку логики выигрыша, но видим, что у нас 4 разных проверки на выигрыш, для каждого из полей. Поэтому мы изменим кое-что, написав отдельно проверку полей.

// Интересный результат, мы пытались рефакторить, а получилось еще более громоздко, и поэтому вернули всё обратно.

// И снова интересный ход, мы все-таки изменим логику, и воспользуемся некими синтаксическими возможностями Java8.



public class CurrentMoveController {

    public Figure currentMove(final Field field) {
        int countO = 0;
        int countX = 0;
        for (int x = 0; x < field.getSize(); x++) {
            for (int y = 0; y < field.getSize(); y++) {
                try {
                    switch (field.getFigure(new Point(x, y))) {
                        case O:
                            countO++;
                            break;
                        case X:
                            countX++;
                            break;
                    }
                } catch (final InvalidPointException e) {
                    e.printStackTrace();
                }
            }
        }
        if (countX == countO)
            return Figure.X;

        if (countO + countX == field.getSize() * field.getSize())
            return null;

        return Figure.O;

    }

}

// это первая версия контроллера хода

public class CurrentMoveController {

    public Figure currentMove(final Field field) {

        int countFigure = 0;

        for (int x = 0; x < field.getSize(); x++) {
            countFigure += countFiguresInTheRow(field, x);
        }

        if (countFigure == field.getSize() * field.getSize())
            return null;

        if (countFigure % 2 == 0)
            return Figure.X;

        return Figure.O;
    }

    private int countFiguresInTheRow(final Field field, final int row) {
        int countFigure = 0;
        for (int x = 0; x < field.getSize(); x++) {
            try {
                if (field.getFigure(new Point(x, row)) != null)
                    countFigure++;
            } catch (final InvalidPointException e) {
                e.printStackTrace();
            }
        }
        return countFigure;
    }

}

// А это уже окончательная версия, тесты все работают.


 private void printLine(final Field field,
                           final int x) {
        for (int y = 0; y < field.getSize(); y++) {
            if (y != 0) {
                System.out.print("|");
            }
            System.out.print(" ");
            final Figure figure;
            try {
                figure = field.getFigure(new Point(x, y));
            } catch (final InvalidPointException e) {
                e.printStackTrace();
                throw new RuntimeException();
            }
            System.out.print(figure != null ? figure : " ");
            System.out.print(" ");
        }
        System.out.println();
    }
	
// В этом методе мы меняем строку 	figure = field.getFigure(new Point(x, y));

на - figure = field.getFigure(new Point(y, x));

- потому что у нас в игре неправильно устанавливались координаты по осям. Напр. задаем х = 3 (т.е. используем последний столбец, считаем координаты х, конечно же, слева-направо), а игра вместо столбца берет третий ряд (ну т.е. нижний, т.к. ряды - координаты y, считаются сверху-вниз). 
Эта проблема с координатами появилась потому что мы оперировали строками при построении поля, а уже в самой игре пережли к координатным осям, вот тут и случилась накладка.




***************


GregorianCalendar d = new GregorianCalendar();

        int today = d.get(Calendar.DAY_OF_MONTH);
        int month = d.get(Calendar.MONTH);

        System.out.printf("today = %d\n", today);
        System.out.printf("month = %d (на самом деле %d месяц, конечно же)\n\n", month, (month+1));

        int weekday = d.get(Calendar.DAY_OF_WEEK);
        System.out.printf("Первоначальное значение weekday (индекс) - %d \n\n", weekday);

        // Ставим дату на начало месяца
        d.set(Calendar.DAY_OF_MONTH, 1);

        weekday = d.get(Calendar.DAY_OF_WEEK);

        System.out.printf("Первый день этого месяца (weekday - индекс) - %d (вторник)\n" +
                "(а вернее индекс текущего дня недели)", weekday);

        int firstDayOfWeek = d.getFirstDayOfWeek();

        System.out.printf("Первый день недели (firstDayOfWeek)- %d\n" +
                          "(т.е. - понедельник, т.к. индексы у американцев начинаются с воскресенья - 1)\n\n", firstDayOfWeek);

        // Отступ в первой строке
        // Здесь же мы изменяем weekday, переменная становится = firstDayOfWeek
        int indent = 0;
        while (weekday != firstDayOfWeek) {
            indent++;
            System.out.println();
            System.out.println("Блок кода внутри которого изменяется переменная weekday:");
            System.out.printf("(weekday - индекс) - %d \n\n", weekday);
            System.out.printf("Calendar.DAY_OF_MONTH = %d\n", d.get(Calendar.DAY_OF_MONTH));
            d.add(Calendar.DAY_OF_MONTH, -1);
            System.out.printf("Calendar.DAY_OF_MONTH = %d\n", d.get(Calendar.DAY_OF_MONTH));
            System.out.printf("Calendar.MONTH = %d\n", d.get(Calendar.MONTH));
            weekday = d.get(Calendar.DAY_OF_WEEK);
            System.out.printf("(weekday - индекс) - %d \n\n", weekday);
        }

        System.out.printf("Отступ (indent) = %d\n", indent);
        System.out.println("(вроде правильно, т.к. месяц начинается со вторника)\n");

        // Вывод названия дней недели
        String[] weekdayNames = new DateFormatSymbols().getShortWeekdays();
        do {
            System.out.printf("%s", weekdayNames[weekday]);
            d.add(Calendar.DAY_OF_WEEK, 1);
            weekday = d.get(Calendar.DAY_OF_WEEK);
        } while (weekday != firstDayOfWeek);
        System.out.println();


"C:\Program Files\Java\jdk1.8.0_112\...
"
today = 9
month = 10 (на самом деле 11 месяц, конечно же)

Первоначальное значение weekday (индекс) - 4 

Первый день этого месяца (weekday - индекс) - 3 (вторник)
(а вернее индекс текущего дня недели)Первый день недели (firstDayOfWeek)- 2
(т.е. - понедельник, т.к. индексы у американцев начинаются с воскресенья - 1)


Блок кода внутри которого изменяется переменная weekday:
(weekday - индекс) - 3 

Calendar.DAY_OF_MONTH = 1
Calendar.DAY_OF_MONTH = 31
Calendar.MONTH = 9
(weekday - индекс) - 2 

Отступ (indent) = 1
(вроде правильно, т.к. месяц начинается со вторника)	



******************

        double percent = 10;
        System.out.println("Before percent = " + percent);
        tripleValue(percent);
        System.out.println("After percent = " + percent);
	
    public static void tripleValue(double x) {
        x = x*3;
        System.out.println("End method triple: x = " + x);
    }
	
	
"C:\Program Files\Java\jdk1.8.0_112\bin\java" -Didea.launcher.port=7534 

Before percent = 10.0
End method triple: x = 30.0
After percent = 10.0



*****************


package horst.mann.tst;

import java.util.Random;

public class Employee {

    private static int nextId;

    private int id;
    private String name = "";
    private double salary;

    // static initialization block
    static {
        Random generator = new Random();
        nextId = generator.nextInt(10000);
        System.out.println("nextId = " + nextId);
        System.out.println();
    }

    // object initialization block
    {
        id =nextId;
        nextId++;
    }

    // Constructors


    public Employee(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }

    public Employee(double s) {
        this("Employee #" +nextId, s);
    }

    public Employee() {

    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }
}


package horst.mann.tst;

public class Main {

    public static void main(String[] args) {
        Employee[] staff = new Employee[3];

        staff[0] = new Employee("Harry", 40000);
        staff[1] = new Employee(60000);
        staff[2] = new Employee();

        for (Employee obj : staff) {
            System.out.println("name = " + obj.getName() + ", id = " + obj.getId() + ", salary = " + obj.getSalary());
        }
        
    }
}


"C:\Program Files\Java\jdk1.8.0_112\bin\java" -Didea.launcher.port=7534...

nextId = 6482

name = Harry, id = 6482, salary = 40000.0
name = Employee #6483, id = 6483, salary = 60000.0
name = , id = 6484, salary = 0.0


****************

Результат вывода работы пакета из папки задач: v1ch05/equals

"C:\Program Files\Java\jdk1.8.0_112\bin\java" -Didea.launcher.port=7537

alice1 == alice2: true
alice1 == alice3: false
alice1.equals(alice3): true
alice1.equals(bob): false

bob.toString(): horst.mann.tst.Employee[name=Bob Brandson,salary=50000.0,hireDay=Sun Oct 01 00:00:00 ALMT 1989]

boss.toString(): horst.mann.tst.Manager[name=Carl Cracker,salary=80000.0,hireDay=Tue Dec 15 00:00:00 ALMT 1987][bonus=0.0]
carl.toString(): horst.mann.tst.Manager[name=Carl Cracker,salary=80000.0,hireDay=Tue Dec 15 00:00:00 ALMT 1987][bonus=0.0]

carl.equals(boss): true

boss.toString(): horst.mann.tst.Manager[name=Carl Cracker,salary=80000.0,hireDay=Tue Dec 15 00:00:00 ALMT 1987][bonus=5000.0]
carl.toString(): horst.mann.tst.Manager[name=Carl Cracker,salary=80000.0,hireDay=Tue Dec 15 00:00:00 ALMT 1987][bonus=0.0]

carl.equals(boss): false
carl.hashCode(): -778315519
boss.hashCode(): 495444225

alice1.hashCode(): -1245406650
alice3.hashCode(): -1245406650
bob.hashCode(): -216751770
carl.hashCode(): -778315519



*******************



package horst.mann.tst;


public class Main {

    public static void main(String[] args) {

        double m = max(3, 5 ,6 ,7 ,8 ,9 ,10.1, 15.2, 4, 2, -1, 0, -54);
        double mm = min(3, 5 ,6 ,7 ,8 ,9 ,10.1, 15.2, 4, 2, -1, 0, -54);

        System.out.println(m);
        System.out.println();
        System.out.println(mm);

    }

    //    Double.MIN_VALUE  -  миним. значение типа double
    //    Double.MAX_VALUE  -  макс. значение типа double


    private static double max(double... values) {
        double larg = Double.MIN_VALUE;
        for (double v : values) if (v > larg) larg = v;
        return larg;
    }

    private static double min(double... values) {
        double larg = Double.MAX_VALUE;
        for (double v : values) if (v < larg) larg = v;
        return larg;
    }

}


*****************


package horst.mann.tst;


import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner in = new Scanner(System.in);

        System.out.println("Enter a size: (SMALL, MEDIUM, LARGE, EXTRA_LARGE) ");

        String input = in.next().toUpperCase();

        Size size = Enum.valueOf(Size.class, input);

        System.out.println("size = " + size);

        System.out.println("abbreviation = " + size.abbreviation);

        if (size == Size.EXTRA_LARGE)
            System.out.println("Good job -- you paid attention to the _.");


    }

enum Size {

    SMALL("S"), MEDIUM("M"), LARGE("L"), EXTRA_LARGE("XL");

    private Size(String abbreviation) {this.abbreviation = abbreviation;}

    public String getAbbreviation() {
        return abbreviation;
    }

    private String abbreviation;

}

}

>>>>>>

Enter a size: (SMALL, MEDIUM, LARGE, EXTRA_LARGE) 
small
size = SMALL
abbreviation = S



******************



package horst.mann.tst;

import javax.swing.*;
import java.awt.*;


public class Main
{
    public static void main(String[] args)
    {
        EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                SimpleFrame frame = new SimpleFrame();
                frame.setLocationRelativeTo(null);		// Фрейм ставим в центр экрана
                frame.setTitle("my first GUI");			// Название фрейма
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);	
                frame.setVisible(true);
            }
        });
    }
}


class SimpleFrame extends JFrame
{
    public SimpleFrame()
    {
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension screenSize = kit.getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;

        setSize(screenWidth/2, screenHeight/2);
        setLocationByPlatform(true);
    }
}



*****************


package horst.mann.tst;

import javax.swing.*;
import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;


public class Main
{
    public static void main(String[] args)
    {
        EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                JFrame frame = new SimpleFrame();
                frame.setLocationRelativeTo(null);
                frame.setTitle("NDraw test");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setVisible(true);
            }
        });
    }
}


class SimpleFrame extends JFrame
{
    public SimpleFrame()
    {
        add(new DrawComponent());
        pack();
    }
}

/**
 * A component that displays rectangles and ellipses.
 */
class DrawComponent extends JComponent {

    public static final int DEFAULT_WIDTH = 400;
    public static final int DEFAULT_HEIGHT = 400;

    @Override
    public void paintComponent(Graphics g) {

        Graphics2D g2 = (Graphics2D) g;

        // draw a rectangle

        double leftX = 100;
        double topY = 100;
        double width = 200;
        double height = 150;

        Rectangle2D rect = new Rectangle2D.Double(leftX, topY, width, height);
        g2.setPaint(Color.MAGENTA);
        g2.draw(rect);

        // draw the enclosed ellipse

        Ellipse2D ellipse = new Ellipse2D.Double();
        ellipse.setFrame(rect);
        g2.setPaint(Color.BLUE);
        g2.draw(ellipse);

        // draw a diagonal lines

        g2.setPaint(Color.ORANGE);
        g2.draw(new Line2D.Double(leftX, topY, leftX + width, topY + height));
        g2.setPaint(Color.ORANGE);
        g2.draw(new Line2D.Double(leftX, topY + height, leftX + width, topY));

        // draw a circle with the same center

        double centerX = rect.getCenterX();
        double centerY = rect.getCenterY();
        double radius = getRadius(width, height);

        Ellipse2D circle = new Ellipse2D.Double();
        circle.setFrameFromCenter(centerX, centerY, centerX + radius, centerY + radius);
        g2.setPaint(Color.GREEN);
        g2.draw(circle);

    }

    private double getRadius(double x, double y) {
        return  (Math.sqrt(x*x + y*y))/2;
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT);
    }

}


***************

{
	"color_scheme": "Packages/Color Scheme - Default/Sunburst.tmTheme",
	"font_size": 13
}


https://github.com/Alex-Fn/xo-game.git

Очистка экрана в cygwin (терминал в Windows) - комбинация CTRL + L

41f607b723e66367c286b1d36773a82d773dfaf7


StringTuple st = new StringTuple("left", "right");
final Tuple<String> st2 = new Tuple<String>("L", "R");
System.out.println(st2.getLeft());
final Tuple<Integer> it = new Tuple<>(2, 4);
System.out.println(it.getLeft());
System.out.println(it.getLeft() + 16);
Tuple<SuperClass> tuple = new Tuple<>(new SuperClass(), new SuperClass());
System.out.println(tuple.getLeft());

